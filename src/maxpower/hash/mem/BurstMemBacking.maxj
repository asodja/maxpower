package maxpower.hash.mem;

import maxpower.hash.MaxHash;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.RoundingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath.DivModResult;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

abstract class BurstMemBacking extends MemBacking {

	public BurstMemBacking(MaxHash<?> owner, String name, DFEStructType structType,
			int numEntries, boolean isDoubleBuffered) {
		super(owner, name, structType, numEntries, isDoubleBuffered);
	}

	protected int getNumEntriesPerBurst() {
		int baseEntrySize = MathUtils.nextMultiple(getStructType().getTotalBits(), 8);

		int entriesPerBurst = getBurstSizeBits() / baseEntrySize;

		/* Get next-lowest power of 2 to ensure that the address
		 * of an entry in a burst can be calculated efficiently. */
		if (!MathUtils.isPowerOf2(entriesPerBurst))
			entriesPerBurst = MathUtils.nextPowerOfTwo(entriesPerBurst) / 2;

		/* Ensure that entries will be at integer byte offsets. */
		while (getBurstSizeBits() % entriesPerBurst > 0)
			entriesPerBurst /= 2;

		return entriesPerBurst;
	}

	protected int getEntrySize() {
		return getBurstSizeBits() / getNumEntriesPerBurst();
	}

	protected int getNumOccupiedBurstsPerTable() {
		int entriesPerBurst = getNumEntriesPerBurst();
		int numBursts = (getNumEntries() + entriesPerBurst - 1) / entriesPerBurst;
		return numBursts;
	}

	@Override
	public int getNumOccupiedBursts() {
		int numBursts = getNumOccupiedBurstsPerTable();
		if (isDoubleBuffered())
			numBursts *= 2;
		return numBursts;
	}

	@Override
	public DFEStruct get(DFEVar ctrl, DFEVar address, Buffer buffer) {
		DFEVar addressInBurst = setupRead(ctrl, address, buffer);
		return processResponse(ctrl, addressInBurst, buffer);
	}

	protected DFEVar setupRead(DFEVar ctrl, DFEVar address, Buffer buffer) {
		MaxHash<?> owner = getOwner();

		int entriesPerBurst = getNumEntriesPerBurst();
		int entryBits = MathUtils.bitsToAddress(entriesPerBurst);

		/* Need some extra space for calculations involving entriesPerBurst. */
		DFEVar widerAddress = address.cast(DFETypeFactory.dfeUInt(address.getType().getTotalBits() + entryBits));

		owner.optimization.pushRoundingMode(RoundingMode.TRUNCATE);
		DivModResult dmr = KernelMath.divMod(widerAddress, owner.constant.var(entriesPerBurst));
		owner.optimization.popRoundingMode();

		DFEVar burstAddress = dmr.getQuotient();
		DFEVar addressInBurst = entryBits == 0 ? owner.constant.var(0) : dmr.getRemainder().cast(DFETypeFactory.dfeUInt(entryBits));

		owner.simPrintf(ctrl, "BurstMemBacking: Buffer: " + buffer.toString() + ":\n");
		owner.simPrintf(ctrl, "  entriesPerBurst: %d\n", getNumEntriesPerBurst());
		owner.simPrintf(ctrl, "  burstAddress: %d\n", burstAddress);
		if (entryBits > 0)
			owner.simPrintf(ctrl, "  addressInBurst: %d\n", addressInBurst);

		doRead(ctrl, burstAddress, buffer);

		return addressInBurst;
	}

	protected abstract int getBurstSizeBits();
	protected abstract int getBaseAddressBursts();

	protected int getBaseAddressBursts(Buffer buffer) {
		int baseAddressBursts = getBaseAddressBursts();
		if (isDoubleBuffered() && buffer == Buffer.B)
			baseAddressBursts += getNumOccupiedBurstsPerTable();
		return baseAddressBursts;
	}

	protected DFEStruct processResponse(DFEVar ctrl, DFEVar addressInBurst, Buffer buffer) {
		MaxHash<?> owner = getOwner();
		DFEVectorType<DFEVar> burstType = new DFEVectorType<DFEVar>(DFETypeFactory.dfeUInt(getEntrySize()), getNumEntriesPerBurst());
		DFEVector<DFEVar> memReadDataVector = burstType.unpack(getBurstData(ctrl, buffer).slice(0, burstType.getTotalBits()));
		DFEVar memReadData =
			addressInBurst.getType().isConcreteType() ?
				owner.control.mux(addressInBurst, memReadDataVector.getElementsAsList()) :
				memReadDataVector.get(0);
		DFEVar memReadDataSliced = memReadData.slice(0, getStructType().getTotalBits());

		owner.simPrintf(ctrl, "  memReadData: 0x%x\n", memReadData);
		owner.simPrintf(ctrl, "  memReadDataSliced: 0x%x\n", memReadDataSliced);

		/* Force delay between memory command write and corresponding data read. */
   		if (getIOSeparation() != 0) {
   			if (owner.getOwner() instanceof KernelLib) {
   				KernelLib k = (KernelLib) owner.getOwner();
    			k.io.forceExactIOSeparation(getDataStreamName(buffer), getCmdStreamName(buffer), getIOSeparation());
   			} else {
   				throw new RuntimeException("IO Seperation requires a regular kernel, not a KernelLite.");
   			}
   		}

		return getStructType().unpack(memReadDataSliced);
	}

	protected abstract void doRead(DFEVar ctrl, DFEVar burstAddress, Buffer buffer);

	protected abstract int getIOSeparation();

	protected abstract DFEVar getBurstData(DFEVar ctrl, Buffer buffer);
}
