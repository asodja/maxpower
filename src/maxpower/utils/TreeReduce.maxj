package maxpower.utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import maxpower.ops.AssociativeOp;

import com.maxeler.maxcompiler.v2.errors.MaxCompilerAPIError;

/**
 * A set of static methods to perform a reduction in a tree-like manner.
 *
 * Tree reduction incurs less scheduling resource cost than a naive reduction and the operations
 * are performed with lower latency.
 *
 * Naive reduction       Tree reduction
 *
 *   a   b c d            a   b c   d
 *    \ /  | |             \ /   \ /
 *     x   | |              x     x
 *      \ /  |               \   /
 *       x   |                 x
 *        \ /
 *         x
 *
 * NB. For operations which are not strictly associative (e.g. floating-point addition), using tree
 *     reduction may affect the result slightly as the order of operations is altered.
 */
public class TreeReduce {
	/**
	 * Reduce the given values using a binary tree and the specified associative operation.
	 */
	public static <T> T reduce(AssociativeOp<T> op, T... values) {
		return reduce(op, Arrays.asList(values));
	}

	/**
	 * Reduce the given values using a binary tree and the specified associative operation.
	 */
	public static <T> T reduce(final AssociativeOp<T> op, List<T> values) {
		Reducer<T> reducer = new Reducer<T>() {
			@Override
			public T reduce(List<T> values) {
				switch (values.size()) {
				case 1: return values[0];
				case 2: return op.op(values[0], values[1]);
				default: throw new MaxCompilerAPIError("Expecting exactly 1 or 2 values");
				}
			}
		};

		return reduce(2, reducer, values);
	}

	/**
	 * Reduce the given values using an n-ary tree.
	 *
	 * @param n the degree of the reduction tree (maximum inputs to node in tree)
	 * @param reducer functor to perform the reduction at each node in tree
	 * @param values values to reduce
	 */
	public static <T> T reduce(int n, Reducer<T> reducer, T... values) {
		return reduce(n, reducer, Arrays.asList(values));
	}

	/**
	 * Reduce the given values using an n-ary tree.
	 *
	 * @param n the degree of the reduction tree (maximum inputs to node in tree)
	 * @param reducer functor to perform the reduction at each node in tree
	 * @param values values to reduce
	 */
	public static <T> T reduce(int n, Reducer<T> reducer, List<T> values) {
		if (values.isEmpty())
			throw new MaxCompilerAPIError("Cannot reduce zero values");

		if (n < 2)
			throw new MaxCompilerAPIError("Reduction tree must have degree of at least 2");

		List<T> reduced = new ArrayList<T>();
		for (List<T> group : CollectionUtils.grouped(values, n)) {
			reduced.add(reducer.reduce(group));
		}

		return (reduced.size() == 1) ? reduced[0] : reduce(n, reducer, reduced);
	}

	/**
	 * A functor, which can take a list of values and reduce down to a single value.
	 */
	public interface Reducer<T> {
		T reduce(List<T> values);
	}
}
