package maxpower.kernel.sort;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

/**
 * Class providing simple interfaces to sort DFEVars using bitonic sort
 * @author Nils Voss
 *
 */
public class BitonicSort {

	/**
	 * Sorts DFEVars
	 * @param input DFEVars to sort
	 * @return Sorted DFEVars
	 */
	public static List<DFEVar> sort(DFEVar... input) {
		return sort(Arrays.asList(input));
	}

	/**
	 * Sorts DFEVars
	 * @param input DFEVars to sort
	 * @return Sorted DFEVars
	 */
	public static DFEVector<DFEVar> sort(DFEVector<DFEVar> input) {
		return input.getType().newInstance(input.getKernel(), sort(input.getElementsAsList()));
	}

	/**
	 * Sorts DFEVars
	 * @param input DFEVars to sort
	 * @return Sorted DFEVars
	 */
	public static List<DFEVar> sort(List<DFEVar> input) {
		List<DFEVar> values = new ArrayList<DFEVar>(input);
		if (!MathUtils.isPowerOf2(input.size())) {
			for (int i = 0; i < MathUtils.getPadding(input.size(), MathUtils.nextPowerOfTwo(input.size())); i++){
				values.add(null);
			}
		}

		return bitonicSort(true, values).subList(0, input.size());
	}

	private static List<DFEVar> bitonicSort(boolean up, List<DFEVar> input) {
		if (input.size() == 1) {
			return input;
		} else {
			List<DFEVar> firstHalf  = bitonicSort(true,  input.subList(0, input.size() / 2));
			List<DFEVar> secondHalf = bitonicSort(false, input.subList(input.size() / 2, input.size()));
			List<DFEVar> combined = new ArrayList<DFEVar>(firstHalf);
			combined.addAll(secondHalf);
			return bitonicMerge(up, combined);
		}
	}

	private static List<DFEVar> bitonicMerge(boolean up, List<DFEVar> input) {
		if (input.size() == 1) {
			return input;
		} else {
			bitonicCompare(up, input);
			List<DFEVar> firstHalf  = bitonicMerge(up, input.subList(0, input.size() / 2));
			List<DFEVar> secondHalf = bitonicMerge(up, input.subList(input.size() / 2, input.size()));
			List<DFEVar> combined = new ArrayList<DFEVar>(firstHalf);
			combined.addAll(secondHalf);
			return combined;
		}
	}

	private static void bitonicCompare(boolean up, List<DFEVar> input) {
		int distance = input.size() / 2;

		for (int i = 0; i < distance; i++) {
			if (input.get(i) == null || input.get(i + distance) == null) {
				if (input.get(i) != null && input.get(i + distance) == null && !up){
					input.set(i + distance, input.get(i));
					input.set(i, null);
				}
				if (input.get(i) == null && input.get(i + distance) != null && up){
					input.set(i, input.get(i + distance));
					input.set(i + distance, null);
				}
			} else {
				DFEVar change;
				if (up == true) {
					change = input.get(i) > input.get(i + distance);
				} else {
					change = input.get(i) < input.get(i + distance);
				}
				DFEVar tmp = input.get(i);
				input.set(i, change ? input.get(i + distance) : input.get(i));
				input.set(i + distance, change ? tmp : input.get(i + distance));
			}
		}
	}
}
