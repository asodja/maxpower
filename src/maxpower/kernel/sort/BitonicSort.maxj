package maxpower.kernel.sort;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

/**
 * Class providing simple interfaces to sort DFEVars using bitonic sort
 * @author Nils Voss
 *
 */
public class BitonicSort {

	/**
	 * Sorts DFEVars
	 * @param input DFEVars to sort
	 * @return Sorted DFEVars
	 */
	public static List<DFEVar> sortVars(DFEVar... input) {
		return sortVars(Arrays.asList(input));
	}

	/**
	 * Sorts DFEVars
	 * @param input DFEVars to sort
	 * @return Sorted DFEVars
	 */
	public static DFEVector<DFEVar> sortVars(DFEVector<DFEVar> input) {
		return input.getType().newInstance(input.getKernel(), sortVars(input.getElementsAsList()));
	}

	/**
	 * Sorts DFEVars
	 * @param input DFEVars to sort
	 * @return Sorted DFEVars
	 */
	public static List<DFEVar> sortVars(List<DFEVar> input) {
		return createDFEVarListFromDFEVarSortObjectList(sort(createDFEVarSortObjectListFromDFEVarList(input)));
	}

	/**
	 * Sorts SortObjects
	 * @param input SortObjects to sort
	 * @return Sorted SortObjects
	 */
	public static List<SortObject> sort(SortObject... input) {
		return sort(Arrays.asList(input));
	}

	/**
	 * Sorts SortObjects
	 * @param input SortObjects to sort
	 * @return Sorted SortObjects
	 */
	public static List<SortObject> sort(List<SortObject> input) {
		List<SortObject> values = new ArrayList<SortObject>(input);
		if (!MathUtils.isPowerOf2(input.size())) {
			for (int i = 0; i < MathUtils.getPadding(input.size(), MathUtils.nextPowerOfTwo(input.size())); i++){
				values.add(null);
			}
		}

		return bitonicSort(true, values).subList(0, input.size());
	}



	private static List<SortObject> bitonicSort(boolean up, List<SortObject> sortObjects) {
		if (sortObjects.size() == 1) {
			return sortObjects;
		} else {
			List<SortObject> firstHalf  = bitonicSort(true,  sortObjects.subList(0, sortObjects.size() / 2));
			List<SortObject> secondHalf = bitonicSort(false, sortObjects.subList(sortObjects.size() / 2,
					sortObjects.size()));
			List<SortObject> combined = new ArrayList<SortObject>(firstHalf);
			combined.addAll(secondHalf);
			return bitonicMerge(up, combined);
		}
	}

	private static List<SortObject> bitonicMerge(boolean up, List<SortObject> sortObjects) {
		if (sortObjects.size() == 1) {
			return sortObjects;
		} else {
			bitonicCompare(up, sortObjects);
			List<SortObject> firstHalf  = bitonicMerge(up, sortObjects.subList(0, sortObjects.size() / 2));
			List<SortObject> secondHalf = bitonicMerge(up, sortObjects.subList(sortObjects.size() / 2,
					sortObjects.size()));
			List<SortObject> combined = new ArrayList<SortObject>(firstHalf);
			combined.addAll(secondHalf);
			return combined;
		}
	}

	private static void bitonicCompare(boolean up, List<SortObject> sortObjects) {
		int distance = sortObjects.size() / 2;

		for (int i = 0; i < distance; i++) {
			if (sortObjects[i] == null || sortObjects[i + distance] == null) {
				if (sortObjects[i] != null && sortObjects[i + distance] == null && !up){
					sortObjects.set(i + distance, sortObjects[i]);
					sortObjects.set(i, null);
				}
				if (sortObjects[i] == null && sortObjects[i + distance] != null && up){
					sortObjects.set(i, sortObjects[i + distance]);
					sortObjects.set(i + distance, null);
				}
			} else {
				DFEVar change;
				if (up) {
					change = sortObjects[i].isBiggerThan(sortObjects[i + distance]);
				} else {
					change = sortObjects[i].isSmallerThan(sortObjects[i + distance]);
				}
				List<SortObject> swappedList = sortObjects[i].swap(change, sortObjects[i + distance]);
				sortObjects.set(i, swappedList[0]);
				sortObjects.set(i + distance, swappedList[1]);
			}
		}
	}

	private static List<SortObject> createDFEVarSortObjectListFromDFEVarList(List<DFEVar> values) {
		List<SortObject> list = new ArrayList<SortObject>();
		for (int i = 0; i < values.size(); i++) {
			list.add(new DFEVarSortObject(values[i]));
		}
		return list;
	}

	private static List<DFEVar> createDFEVarListFromDFEVarSortObjectList(List<SortObject> values) {
		List<DFEVar> list = new ArrayList<DFEVar>();
		for (int i = 0; i < values.size(); i++) {
			list.add(values[i].getKey());
		}
		return list;
	}

	private static class DFEVarSortObject implements SortObject {

		private final DFEVar key;

		public DFEVarSortObject(DFEVar value) {
			key = value;
		}

		@Override
		public DFEVar getKey() {
			return key;
		}

		@Override
		public List<SortObject> swap(DFEVar change, SortObject secondElement) {
			List<SortObject> list = new ArrayList<SortObject>();
			list.add(new DFEVarSortObject(change ? secondElement.getKey() : key));
			list.add(new DFEVarSortObject(change ? key : secondElement.getKey()));
			return list;
		}

		@Override
		public DFEVar isBiggerThan(SortObject element) {
			return key > element.getKey();
		}

		@Override
		public DFEVar isSmallerThan(SortObject element) {
			return key < element.getKey();
		}
	}
}
