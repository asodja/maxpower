package maxpower.kernel.io;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObjectVectorizable;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

/**
 * Creates an input similar to {@link com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO IO}
 * with a variable number of inputs per cycle up to some build time maximum.
 *
 * @author David Packwood
 */
public class VariableWidthIO extends KernelLib {


	/**
	 * Create an io port of a given maximum width so that a variable width input can be created.
	 * @param owner The Kernel or KernelLib the object is being used in.
	 */
	public VariableWidthIO(KernelLib owner) {
		super (owner);
	}

	/**
	 * Create an input of a given maximum width which can return a variable number of valid data (up to the maximum width) each cycle from the input.
	 * @param name The name of the input as referenced in the manager
	 * @param wideInputType A DFEVectorType representing the input port
	 * @param numToRead A stream giving the number of valid number of inputs needed on a given cycle (each value must be leq the maximum width for defined behaviour)
	 * @return A DFEVector of size maximum width, the first <code> numToRead </code> elements of which are read linearly from the input.
	 */
	public <T extends KernelObjectVectorizable<T,?>> DFEVector<T> input(String name, DFEVectorType<T> wideInputType, DFEVar numToRead) {
		int maxWidth = wideInputType.getSize();
		int shiftBits = MathUtils.bitsToAddress(maxWidth);
		DFEType shiftType = dfeUInt(shiftBits);
		DFEType carryType = dfeUInt(shiftBits + 1);
		DFEVar isFirstTick = control.count.pulse(1);
		DFEVar need = numToRead.cast(carryType);

		DFEVar carried = carryType.newInstance(this);
		DFEVar used = isFirstTick ?  0 : stream.offset(carried,-1);
		optimization.pushPipeliningFactor(0);
		DFEVar neededWidth = used + need;
		carried <== (neededWidth < maxWidth) ?  neededWidth : neededWidth - maxWidth;
		optimization.popPipeliningFactor();

		DFEVar needToGet = (neededWidth > maxWidth) | ((used === 0) & (need !== 0));
		DFEVector<T> wideInput = io.input(name, wideInputType, needToGet);

		DFEVector<T> output = wideInputType.newInstance(this);
		DFEVector<T> remainder = wideInputType.newInstance(this);
		DFEVector<T> prev = neededWidth > maxWidth ?  stream.offset(remainder, -1) : wideInput ;
		for (int i = 0; i < maxWidth; i++) {
			output[i] <== (i < used) ?  wideInput[i] : prev[i];
		}
		optimization.pushPipeliningFactor(0);
		remainder <==  needToGet ? wideInput: prev;
		optimization.popPipeliningFactor();

		DFEVector<T> outputRotated = output.rotateElementsRight(used.cast(shiftType));
		return outputRotated;
	}

	/**
	 * Create an output which will accumulate a variable amount of input data each cycle and output it through a fixed width io port.
	 * @param name The name of the output as referenced in the manager
	 * @param wideData A DFEVector of incoming data, with valid data at the beginning
	 * @param numToWrite The amount of valid data received this cycle
	 */
	public <T extends KernelObjectVectorizable<T,?>> void output(String name, DFEVector<T> wideData, DFEVar numToWrite) {

		DFEVectorType<T> wideDataType = wideData.getType();
		int maxWidth = wideDataType.getSize();
		int shiftBits = MathUtils.bitsToAddress(maxWidth);
		DFEType shiftType = dfeUInt(shiftBits);
		DFEType carryType = dfeUInt(shiftBits + 1);
		DFEVar isFirstTick = control.count.pulse(1);
		DFEVar receiving = numToWrite.cast(carryType);


		DFEVar carried = carryType.newInstance(this);
		DFEVar used = isFirstTick ?  0 : stream.offset(carried,-1);
		optimization.pushPipeliningFactor(0);
		DFEVar neededWidth = used + receiving;
		carried <== (neededWidth < maxWidth) ?  neededWidth : neededWidth - maxWidth;
		optimization.popPipeliningFactor();

		DFEVector<T> wideDataRotated = wideData.rotateElementsLeft(used.cast(shiftType));
		DFEVector<T> output = wideDataType.newInstance(this);
		DFEVector<T> remainder = wideDataType.newInstance(this);
		DFEVector<T> prev = stream.offset(remainder, -1);
		for (int i = 0; i < maxWidth; i++) {
			output[i] <== (i < used) ? prev[i] : wideDataRotated[i];
		}

		DFEVar needToWrite = neededWidth >= maxWidth;
		optimization.pushPipeliningFactor(0);
		remainder <==  needToWrite ? wideDataRotated : output;
		optimization.popPipeliningFactor();

		io.output(name, output, wideDataType, needToWrite);

	}

}
