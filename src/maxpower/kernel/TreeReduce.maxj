package maxpower.kernel;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import maxpower.ops.AssociativeOp;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObjectVectorizable;

/**
 * A set of static methods to perform a reduction in a tree-like manner.
 *
 * Tree reduction incurs less scheduling resource cost than a naive reduction and the operations
 * are performed with lower latency.
 *
 * Naive reduction       Tree reduction
 *
 *   a   b c d            a   b c   d
 *    \ /  | |             \ /   \ /
 *     x   | |              x     x
 *      \ /  |               \   /
 *       x   |                 x
 *        \ /
 *         x
 *
 * NB. For operations which are not strictly associative (e.g. floating-point addition), using tree
 *     reduction may affect the result slightly as the order of operations is altered.
 */
public class TreeReduce {
	public static <T extends KernelObjectVectorizable<T, T>> T reduce(AssociativeOp<T> op, T... inputs) {
		return reduce(op, Arrays.asList(inputs));
	}

	public static <T extends KernelObjectVectorizable<T, T>> T reduce(AssociativeOp<T> op, List<T> inputs) {
		if (inputs.isEmpty())
			throw new RuntimeException("Input length for reduction needs to be >= 1.");

		List<T> current = inputs;
		while (current.size() > 1) {
			List<T> next = new ArrayList<T>(current.size()/2 + 1);

			for (int i = 0; i < current.size(); i += 2) {
				if (i + 1 < current.size())
					next.add(op.op(current[i], current[i+1]));
				else
					next.add(current[i]);
			}

			current = next;
		}

		return current[0];
	}
}
