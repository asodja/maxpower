package maxpower.kernel.arithmetic;

import static com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.bitreverse;
import static com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.leading1Detect;
import static com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.onehotDecode;
import static com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory.dfeBool;
import static com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory.dfeFixOffset;
import static com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory.dfeInt;
import static com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory.dfeUInt;
import static com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType.sft;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import maxpower.kernel.KernelBinaryOp.Max;
import maxpower.kernel.TreeReduce;
import maxpower.kernel.pipeline.FanoutLimiter;
import maxpower.ops.AssociativeOp;

import com.maxeler.maxcompiler.v2.errors.MaxCompilerAPIError;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.RoundingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.FloatingPoint;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmInput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmOutput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmValue;
import com.maxeler.maxcompiler.v2.statemachine.kernel.KernelStateMachine;
import com.maxeler.maxcompiler.v2.statemachine.types.DFEsmValueType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

/**
 * Add several floating-point numbers, without de-normalizing and re-normalizing the intermediate results,
 * thus saving resources.
 *
 * N.B. The addition will be performed in a binary tree, which may slightly effect the final result, due
 * to the altered order of the additions (floating-point addition is not strictly commutative).
 */
public class FloatingPointMultiAdder {
	public static final int DEFAULT_NUM_GUARD_BITS = 1;

	/**
	 * Sum values using the default number of guard bits.
	 */
	public static DFEVar add(DFEVar... summands) {
		return add(Arrays.asList(summands));
	}

	/**
	 * Sum values using the default number of guard bits.
	 */
	public static DFEVar add(List<DFEVar> summands) {
		return add(DEFAULT_NUM_GUARD_BITS, summands);
	}

	/**
	 * Sum values using the specified number of guard bits.
	 *
	 * N.B. Increasing the number of guards bits may decrease the numerical error
	 * from rounding, but may also increase the resource usage on the DFE.
	 *
	 * @param numGuardBits  Number of extra bits used during summation to improve precision.
	 * @param summands      Values to sum.
	 */
	public static DFEVar add(int numGuardBits, DFEVar... summands) {
		return add(numGuardBits, Arrays.asList(summands));
	}

	/**
	 * Sum values using the specified number of guard bits.
	 *
	 * N.B. Increasing the number of guards bits may decrease the numerical error
	 * from rounding, but may also increase the resource usage on the DFE.
	 *
	 * @param numGuardBits  Number of extra bits used during summation to improve precision.
	 * @param summands      Values to sum.
	 */
	public static DFEVar add(int numGuardBits, List<DFEVar> summands) {
		switch (summands.size()) {
		case 0: throw new MaxCompilerAPIError("Must have at least one float.");
		case 1: return summands[0];
		case 2: return summands[0] + summands[1];
		default: ; // continue
		}

		checkTypesIdentical(summands);

		KernelLib owner = summands[0].getKernel();
		DFEFloat  type  = (DFEFloat) summands[0].getType();

		DFEVar maxExponent = getMaxExponent(summands);

		List<DFEStruct> treeValues = getReductionInputs(numGuardBits, summands, maxExponent);

		DFEStruct sum = TreeReduce.reduce(new CondAddSubWithBitGrowth(), treeValues);
		DFEVar sumNeg = sum["neg"];
		DFEVar sumVal = sum["val"];

		// Fix the signs of the result after the reduction
		sumNeg ^= (sumVal < 0);
		// FIXME There is a ticket open on the compiler which will make abs work in a single cycle
		//       without manual pipelining.
		owner.optimization.pushPipeliningFactor(0);
		sumVal  = owner.optimization.pipeline(asUnsigned(KernelMath.abs(sumVal)));
		owner.optimization.popPipeliningFactor();

		// Reinterpret our result as though it has a single integer bit and calculate appropriate exponent.
		DFEVar sumValExp = maxExponent + (((DFEFix) sumVal.getType()).getIntegerBits() - 1);
		int sumValBits = sumVal.getType().getTotalBits();
		sumVal = reinterpretCast(sumVal, dfeFixOffset(sumValBits, 1-sumValBits, SignMode.UNSIGNED));

		// Shift to get rid of any leading zeroes
		DFEVar shift           = getLeadingZeroes(sumVal);
		DFEVar shiftCast       = shift.cast(sumValExp.getType());
		DFEVar underflows      = (shiftCast >= sumValExp);
		// We don't support denormalized numbers
		DFEVar shiftedExponent = ((sumVal === 0) | underflows) ? 0 : (sumValExp - shiftCast);
		DFEVar shiftedSumVal   = underflows ? 0 : (sumVal << shift);

		// FIXME Floating point typically uses near-even rounding. To do this properly, we'd have to do
		//       the reduction with 2*mantissa bits.
		owner.optimization.pushRoundingMode(RoundingMode.TONEAR);
		// Cast away guard bits to perform the rounding. We need the extra integer bit in case it rounds up to 2.
		DFEVar roundedMantissa =
			shiftedSumVal.cast(dfeFixOffset(type.getMantissaBits()+1, 1-type.getMantissaBits(), SignMode.UNSIGNED));
		owner.optimization.popRoundingMode();

		// Renormalize as necessary and slice out the fractional bits of the mantissa.
		// Comparison to 2 depends on only a single bit, so remove pipelining.
		owner.optimization.pushPipeliningFactor(0);
		DFEVar gteTwo  = (roundedMantissa >= 2);
		owner.optimization.popPipeliningFactor();
		// It is not possible that resultMantissa > 2. If gteTwo, fractional bits must be zero.
		DFEVar roundedFractionBits = gteTwo ? 0 : roundedMantissa.slice(0, type.getMantissaBits()-1);
		DFEVar roundedExponent     = shiftedExponent + gteTwo.cast(shiftedExponent.getType());

		return (sumNeg # roundedExponent # roundedFractionBits).cast(type);
	}

	// Count the number of '0's before the first '1' (starting from MSB)
	private static DFEVar getLeadingZeroes(DFEVar v) {
		return onehotDecode(bitreverse(leading1Detect(v)));
	}

	private static DFEVar getMaxExponent(List<DFEVar> summands) {
		KernelLib owner = summands[0].getKernel();

		List<DFEVar> exponents = new ArrayList<DFEVar>();
		for (DFEVar summand : summands) {
			exponents.add(getExponent(summand));
		}

		// TODO this seems rather arbitrary
		int fanoutLimit = (owner.optimization.getPipeliningFactor() == 0)
		                ? 1024 : (8 + (int)((1 - owner.optimization.getPipeliningFactor())*8));
		return new FanoutLimiter(owner, TreeReduce.reduce(new Max(), exponents), fanoutLimit).get();
	}

	private static DFEVar getSign(DFEVar val) {
		return FloatingPoint.getSignBit(val).cast(dfeUInt(1));
	}

	private static DFEVar getExponent(DFEVar val) {
		int numExponentBits = ((DFEFloat) val.getType()).getExponentBits();
		return FloatingPoint.getExponentBits(val).cast(dfeUInt(numExponentBits));
	}

	// get mantissas with implicit leading 1 and guard bits appended
	private static DFEVar getMantissa(int numGuardBits, DFEVar val) {
		KernelLib owner = val.getKernel();
		DFEVar implicit1 = (getExponent(val) !== 0);
		DFEVar mantissa  = implicit1 # FloatingPoint.getMantissaBits(val);

		if (numGuardBits > 0)
			mantissa = mantissa # owner.constant.zero(dfeUInt(numGuardBits));

		int bits = mantissa.getType().getTotalBits();
		// fixed point type with one integer bit (the rest fractional bits)
		return mantissa.cast(dfeFixOffset(bits, 1-bits, SignMode.UNSIGNED));
	}

	private static DFEVar getShift(DFEVar maxExponent, DFEVar summand, int maxShiftBits) {
		DFEVar expDelta = maxExponent - getExponent(summand);
		DFEVar maxShift = summand.getKernel().constant.var(expDelta.getType(), (1 << maxShiftBits) - 1);
		return KernelMath.min(maxShift, expDelta).cast(dfeUInt(maxShiftBits));
	}

	private static List<DFEStruct> getReductionInputs(int numGuardBits, List<DFEVar> summands, DFEVar maxExponent) {
		KernelLib owner = summands[0].getKernel();

		List<DFEStruct> redVals = new ArrayList<DFEStruct>();
		for (DFEVar summand : summands) {
			DFEVar mantissa     = getMantissa(numGuardBits, summand);
			int    maxShiftBits = MathUtils.bitsToRepresent(mantissa.getType().getTotalBits());
			DFEVar normalized   = (mantissa >> getShift(maxExponent, summand, maxShiftBits));

			DFEVar redValue = asSigned(normalized); // convert to signed type

			DFEStruct redVal = getReductionType(redValue.getType()).newInstance(owner);
			redVal["neg"] <== getSign(summand);
			redVal["val"] <== redValue;

			redVals.add(redVal);
		}
		return redVals;
	}

	private static DFEVar asSigned(DFEVar v) {
		DFEFix unsignedType = (DFEFix) v.getType();
		DFEFix signedType   = dfeFixOffset(unsignedType.getTotalBits()+1, unsignedType.getOffset(), SignMode.TWOSCOMPLEMENT);
		return v.cast(signedType);
	}

	private static DFEVar asUnsigned(DFEVar v) {
		DFEFix signedType   = (DFEFix) v.getType();
		DFEFix unsignedType = dfeFixOffset(signedType.getTotalBits()-1, signedType.getOffset(), SignMode.UNSIGNED);
		return v.cast(unsignedType);
	}

	private static DFEVar reinterpretCast(DFEVar v, DFEType type) {
		return type.unpack(v.pack());
	}

	private static void checkTypesIdentical(List<DFEVar> summands) {
		for (DFEVar summand : summands) {
			if (!summand.getType().equals(summands[0].getType())) {
				throw new MaxCompilerAPIError("All of the floats must have the same type.");
			}
		}
	}

	private static DFEStructType getReductionType(DFEType valueType) {
		return new DFEStructType(sft("neg", dfeBool()), sft("val", valueType));
	}

	// The CondAddSub pass in the compiler does not currently support bit growth.
	// This is temporary workaround until it does.
	private static class CondAddSubWithBitGrowth implements AssociativeOp<DFEStruct> {
		// Implement using state machine so we're not unnecessarily creating extra nodes in graph.
		private static class SM extends KernelStateMachine {
			private final DFEsmInput a, b, c;
			private final DFEsmOutput r;

			protected SM(KernelLib owner, int bits) {
				super(owner);

				a = io.input("a", dfeInt(bits));
				b = io.input("b", dfeInt(bits));
				c = io.input("c", dfeBool());
				r = io.output("r", dfeInt(bits));
			}

			@Override
			protected void outputFunction() {
				r <== a + (b ^ mask(c, r.getType())) + c.cast(r.getType());
			}

			private DFEsmValue mask(DFEsmValue c, DFEsmValueType type) {
				DFEsmValue mask = c;
				for (int i = 1; i < type.getTotalBits(); ++i) {
					mask = mask # c;
				}
				return mask.cast(type);
			}

			@Override protected void nextState() {} // there is no state!!
		}

		private static int i = 0;
		@Override
		public DFEStruct op(DFEStruct a, DFEStruct b) {
			DFEVar aNeg = a["neg"];
			DFEVar bNeg = b["neg"];
			DFEVar aVal = a["val"];
			DFEVar bVal = b["val"];

			KernelLib owner = a.getKernel();

			owner.optimization.pushEnableBitGrowth(true);
			DFEType rValType = (aVal + bVal).getType(); // this addition will be optimized away
			owner.optimization.popEnableBitGrowth();

			SMIO sm = owner.addStateMachine("CondAddSubSM"+i++, new SM(owner, rValType.getTotalBits()));
			sm.connectInput("a", reinterpretCast(aVal.cast(rValType), dfeInt(rValType.getTotalBits())));
			sm.connectInput("b", reinterpretCast(bVal.cast(rValType), dfeInt(rValType.getTotalBits())));
			sm.connectInput("c", aNeg ^ bNeg);

			DFEStruct result = getReductionType(rValType).newInstance(a.getKernel());
			result["neg"] <== aNeg;
			result["val"] <== owner.optimization.pipeline(reinterpretCast(sm.getOutput("r"), rValType));
			return result;
		}
	}
}
