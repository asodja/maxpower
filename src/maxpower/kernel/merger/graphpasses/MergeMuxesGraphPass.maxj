package maxpower.kernel.merger.graphpasses;

import java.util.ArrayList;
import java.util.List;

import maxpower.kernel.merger.KMGraph;
import maxpower.kernel.merger.nodes.KMNode;
import maxpower.kernel.merger.nodes.KMNodeMux;

/**
 * This graph pass merges muxes that directly follow each other.
 * Average Complexity: O(n)
 * Worst Case Complexity: O(n^2)
 * @author nvoss
 *
 */
public class MergeMuxesGraphPass {
	public static boolean run(final KMGraph graph) {

		return GraphPass.runUntilNoChange(graph, new GraphPass.NodewiseProcessor() {
			@Override
			public boolean processNode(KMNode node) {
				boolean changed = false;
				if (nodeValid(node)) {
					KMNodeMux upperMux = (KMNodeMux) node;
					KMNodeMux lowerMux = (KMNodeMux) node.getOutputs()[0];

					List<KMNode> newMuxInputs = new ArrayList<KMNode>();
					int upperMuxInputIndex = 1;
					int lowerMuxInputIndex = 1;
					for (int i = 0; i < graph.getKernelCount(); i++) {
						if (lowerMux.getUsedInKernels().contains(i)) {
							if (upperMux.getUsedInKernels().contains(i)) {
								newMuxInputs.add(upperMux.getInputs()[upperMuxInputIndex++]);
								lowerMuxInputIndex++;
							} else {
								newMuxInputs.add(lowerMux.getInputs()[lowerMuxInputIndex++]);
							}
						} else {
							newMuxInputs.add(null);
						}
					}

					// Build new Mux
					KMNodeMux replacementMux = new KMNodeMux(upperMux.getInputs()[0], newMuxInputs);
					graph.addNode(replacementMux);
					replacementMux.addUsedInKernels(lowerMux.getUsedInKernels());
					replacementMux.addOutputs(lowerMux.getOutputs());

					// Reroute rest
					for (KMNode input : upperMux.getInputs()) {
						input.replaceOutputs(upperMux, replacementMux);
					}
					lowerMux.getInputs()[0].removeOutput(lowerMux);
					for (int i = 1; i < lowerMux.getInputs().size(); i++) {
						lowerMux.getInputs()[i].replaceOutputs(lowerMux, replacementMux);
					}
					for (KMNode output : lowerMux.getOutputs()) {
						output.replaceInputs(lowerMux, replacementMux);
					}

					graph.removeNode(lowerMux);
					graph.removeNode(upperMux);
					changed = true;
				}
				return changed;
			}

			public boolean nodeValid(KMNode node) {
				return node instanceof KMNodeMux && node.getOutputs().size() == 1 &&
					((KMNodeMux) node).isAutoGenerated() && node.getOutputs()[0] instanceof KMNodeMux &&
					((KMNodeMux) node.getOutputs()[0]).isAutoGenerated();
			}
		});
	}
}
