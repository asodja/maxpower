package maxpower.kernel.merger.graphpasses;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import maxpower.kernel.merger.KMGraph;
import maxpower.kernel.merger.Merger;
import maxpower.kernel.merger.nodes.KMNode;
import maxpower.kernel.merger.nodes.KMNodeConstant;
import maxpower.kernel.merger.nodes.KMNodeMux;
import maxpower.kernel.merger.ops.CommutativeOp;

/**
 * This graph pass tries to merge nodes which share one input.
 * Average Complexity: O(n^3)
 * @author nvoss
 *
 */
public class MergeIncomingPathsGraphPass {

	public static boolean run(final KMGraph graph, final Merger merger, double lutWeight,
			double FFWeight, double BRAMWeight, double DSPWeight, double minCosts) {

		return GraphPass.runSortedByCost(graph, merger, lutWeight, FFWeight, BRAMWeight, DSPWeight, minCosts,
				new GraphPass.NodewiseProcessor() {

			@Override
			public boolean processNode(KMNode node) {
				KMNode match = getPossibleMatch(merger, graph, node);
				if (match != null) {
					List<KMNode> nodeReplacedInputs = new ArrayList<KMNode>();
					List<KMNode> possibleMatchReplacedInputs = new ArrayList<KMNode>();
					if (node instanceof CommutativeOp) {
						List<KMNode> nodeInputs = new ArrayList<KMNode>();
						nodeInputs.addAll(node.getInputs());
						List<KMNode> possibleMatchInputs = new ArrayList<KMNode>();
						possibleMatchInputs.addAll(match.getInputs());
						for (KMNode input : node.getInputs()) {
							if (!possibleMatchInputs.remove(input)) {
								nodeReplacedInputs.add(input);
							}
						}
						for (KMNode input : match.getInputs()) {
							if (!nodeInputs.remove(input)) {
								possibleMatchReplacedInputs.add(input);
							}
						}
					} else {
						for (int i = 0; i < node.getInputs().size(); i++) {
							if (node.getInputs()[i] != match.getInputs()[i]) {
								nodeReplacedInputs.add(node.getInputs()[i]);
								possibleMatchReplacedInputs.add(match.getInputs()[i]);
							}
						}
					}

					List<KMNode> nodesToAdd = new ArrayList<KMNode>();
					List<KMNode> nodesToRemove = new ArrayList<KMNode>();
					for (int i = 0; i < nodeReplacedInputs.size(); i++) {
						List<KMNode> muxInputs = new ArrayList<KMNode>();
						for (int j = 0; j < graph.getKernelCount(); j++) {
							if (node.getUsedInKernels().contains(j)) {
								muxInputs.add(nodeReplacedInputs[i]);
							} else if (match.getUsedInKernels().contains(j)) {
								muxInputs.add(possibleMatchReplacedInputs[i]);
							} else {
								muxInputs.add(null);
							}
						}
						KMNodeMux mux = new KMNodeMux(merger.getKernelSelectNode(), muxInputs);
						mux.addOutput(node);
						merger.getKernelSelectNode().addOutput(mux);

						nodeReplacedInputs[i].replaceOneOutput(node, mux);
						possibleMatchReplacedInputs[i].replaceOneOutput(match, mux);

						node.replaceOneInput(nodeReplacedInputs[i], mux);
						node.addOutputs(match.getOutputs());

						for (KMNode possibleMatchOutput : match.getOutputs()) {
							possibleMatchOutput.replaceInputs(match, node);
						}

						mux.addUsedInKernels(node.getUsedInKernels());
						mux.addUsedInKernels(match.getUsedInKernels());

						nodesToAdd.add(mux);
					}
					nodesToRemove.add(match);
					node.addUsedInKernels(match.getUsedInKernels());

					graph.removeNodes(nodesToRemove);
					graph.addNodes(nodesToAdd);
					return true;
				}
				return false;
			}
		});
	}

	public static double estimateImprovement(final KMGraph graph, final Merger merger, double lutWeight,
			double FFWeight, double BRAMWeight, double DSPWeight, double minCosts) {

		return GraphPass.getImprovementByRunGraphPass(graph, merger, lutWeight, FFWeight, BRAMWeight, DSPWeight,
				minCosts, new GraphPass.NodewiseEstimator() {

			@Override
			public double processNode(KMNode node) {
				KMNode match = getPossibleMatch(merger, graph, node);
				if (match != null) {
					// If the shared inputs are constants we want to give slightly less bias.
					boolean isConstant = true;
					if (node instanceof CommutativeOp) {
						ArrayList<KMNode> intersection = new ArrayList<KMNode>(node.getInputs());
						intersection.retainAll(match.getInputs());
						for (KMNode input : intersection) {
							if (!(input instanceof KMNodeConstant)) {
								isConstant = false;
							}
						}
					} else {
						for (int i = 0; i < node.getInputs().size(); i++) {
							if (node.getInputs()[i] == match.getInputs()[i] &&
									!(node.getInputs()[i] instanceof KMNodeConstant)) {
								isConstant = false;
							}
						}
					}
					if (isConstant) {
						return node.getCosts() * 1.1;
					} else {
						return node.getCosts() * 1.2;
					}
				}
				return 0;
			}
		});
	}

	private static KMNode getPossibleMatch(Merger merger, KMGraph graph, KMNode node) {
		//TODO: Latency
		List<KMNode> possibleMatches = new ArrayList<KMNode>();
		for (KMNode possibleMatch : graph.getNodes()) {
			// Check if the graph pass can be applied at all
			if (checkMatch(node, possibleMatch)) {
				Set<Integer> intersection = new HashSet<Integer>();
				intersection.addAll(node.getUsedInKernels());
				intersection.retainAll(possibleMatch.getUsedInKernels());
				if (intersection.isEmpty()) {
					// Now we only have to check if one of the inputs is the same. And make sure we do not create a loop
					if (checkOneInputEqual(node, possibleMatch) &&
						!(node.isInput(possibleMatch) || possibleMatch.isInput(node))) {
						possibleMatches.add(possibleMatch);
					}
				}
			}
		}
		if (!possibleMatches.isEmpty()) {
			/*
			 * In order to determine which node is used for merging we use a heuristic.
			 * We measure the maximal distance (in terms of latency) from the inputs to the node.
			 * Since we do not allow loops this should be a rather good assumption in order to determine the point
			 * in time when the node is going to be scheduled.
			 *
			 * We use so that we can try to merge nodes which are roughly at "the same height" in the graph.
			 * This minimises scheduling resources and enables more nodes to be merged since we introduce less new
			 * dependencies between nodes.
			 */
			int minDifference = Integer.MAX_VALUE;
			KMNode bestMatch = null;
			for (KMNode possibleMatch : possibleMatches) {
				int diff = Math.abs(possibleMatch.getMaxDistanceFromInputs(merger) -
						node.getMaxDistanceFromInputs(merger));
				if (diff < minDifference) {
					minDifference = diff;
					bestMatch = possibleMatch;
				}
			}
			return bestMatch;
		}
		return null;
	}

	private static boolean checkMatch(KMNode node, KMNode possibleMatch) {
		return node.getClass().equals(possibleMatch.getClass()) && node != possibleMatch &&
			!(node instanceof KMNodeMux)
			&& node.getInputs().size() == possibleMatch.getInputs().size() &&
			node.getResultType().equals(possibleMatch.getResultType());
	}

	private static boolean checkOneInputEqual(KMNode firstNode, KMNode secondNode) {
		boolean result = false;
		if (firstNode instanceof CommutativeOp) {
			for (KMNode nodeInput : firstNode.getInputs()) {
				if (secondNode.getInputs().contains(nodeInput) && !(nodeInput instanceof KMNodeConstant)) {
					result = true;
					break;
				}
			}
		} else {
			for (int i = 0; i < firstNode.getInputs().size(); i++) {
				if (firstNode.getInputs()[i] == secondNode.getInputs()[i] &&
						!(firstNode.getInputs()[i] instanceof KMNodeConstant)) {
					result = true;
					break;
				}
			}
		}
		// Check that atleast one input is different
		List<KMNode> firstNodeInputs = new ArrayList<KMNode>();
		firstNodeInputs.addAll(firstNode.getInputs());
		firstNodeInputs.removeAll(secondNode.getInputs());
		List<KMNode> secondNodeInputs = new ArrayList<KMNode>();
		secondNodeInputs.addAll(secondNode.getInputs());
		secondNodeInputs.removeAll(firstNode.getInputs());
		return result && (!firstNodeInputs.isEmpty() || !secondNodeInputs.isEmpty());
	}

}
