package maxpower.kernel.merger.nodes;

import java.util.ArrayList;
import java.util.List;

import maxpower.kernel.merger.KMVar;
import maxpower.kernel.merger.Merger;
import maxpower.kernel.merger.ops.AssociativeOp;
import maxpower.kernel.merger.ops.CommutativeOp;
import maxpower.kernel.merger.utils.LatencyEstimation;
import maxpower.kernel.merger.utils.ResourceUsage;
import maxpower.kernel.pipeline.FanoutLimiter;

import com.maxeler.maxcompiler.v2.errors.MaxCompilerAPIError;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObjectVectorizable;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class KMNodeMax extends KMNode implements java.io.Serializable, AssociativeOp, CommutativeOp {

	private static final long serialVersionUID = -3414257181032931452L;

	public KMNodeMax(KMVar lhs, KMVar rhs) {
		super();
		m_inputs.add(lhs.getSource());
		m_inputs.add(rhs.getSource());
	}

	public KMNodeMax() {
		super();
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public void execute(Merger merger) {
		m_result = new FanoutLimiter(reduceInputs(new Max()), merger.getMaxFanout());
	}

	@Override
	public double evaluate(double val1, double val2) {
		return Math.max(val1, val2);
	}

	@Override
	public double getIdentity() {
		return Double.NEGATIVE_INFINITY;
	}

	@Override
	public String toString() {
		return "NodeMax: " + m_id;
	}

	@Override
	public ResourceUsage getResourceUsageEstimate(Merger merger) {
		ResourceUsage result = ResourceUsage.getMux(m_resultType.getPrimitiveType().getTotalBits()) +
			ResourceUsage.getCompare(m_resultType.getPrimitiveType().getTotalBits());
		result *= m_resultType.getPrimitiveCount();
		return result * (m_inputs.size() - 1);
	}

	@Override
	int getLatencyEstimate(Merger merger) {
		int latency = LatencyEstimation.getMax(merger, m_resultType);
		return latency * MathUtils.ceilLog2(m_inputs.size());
	}

	/**
	 * Max operator with support for comparing DFEVars, DFEVectors, nest DFEVectors, etc.
	 */
	private static class Max<T> implements maxpower.ops.AssociativeOp<T> {
		@SuppressWarnings({ "rawtypes", "unchecked" })
		@Override
		public T op(T a, T b) {
			if (a instanceof DFEVar) {
				return uncheckedCast(KernelMath.max((DFEVar) a, (DFEVar) b));
			} else if (a instanceof DFEVector) {
				return uncheckedCast(opVec((DFEVector) a, (DFEVector) b));
			} else {
				throw new MaxCompilerAPIError("Max only supports DFEVars and DFEVectors");
			}
		}

		private <U extends KernelObjectVectorizable<U, ?>> DFEVector<U> opVec(DFEVector<U> a, DFEVector<U> b) {
			List<U> maxs = new ArrayList<U>();
			for (int i = 0; i < a.getSize(); ++i) {
				maxs.add(new Max<U>().op(a[i], b[i]));
			}
			return DFEVectorType.newInstance(maxs);
		}
	}
}
