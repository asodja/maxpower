package maxpower.kernel.merger.nodes;

import maxpower.kernel.KernelUnaryOp;
import maxpower.kernel.merger.KMVar;
import maxpower.kernel.merger.Merger;
import maxpower.kernel.merger.ops.UnaryOp;
import maxpower.kernel.merger.utils.LatencyEstimation;
import maxpower.kernel.merger.utils.ResourceUsage;
import maxpower.kernel.pipeline.FanoutLimiter;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;

public class KMNodeSqrt extends KMNode implements java.io.Serializable, UnaryOp {

	private static final long serialVersionUID = 8193126858515889527L;

	public KMNodeSqrt(KMVar input) {
		super();
		m_inputs.add(input.getSource());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public void execute(Merger merger) {
		m_result = new FanoutLimiter(apply(m_inputs[0].getResult(), new KernelUnaryOp.Sqrt()),
				merger.getMaxFanout());
	}

	@Override
	public double evaluate(double val) {
		return Math.sqrt(val);
	}

	@Override
	public String toString() {
		return "NodeSqrt: " + m_id;
	}

	@Override
	public ResourceUsage getResourceUsageEstimate(Merger merger) {
		ResourceUsage result;
		if (m_resultType.isFixed()) {
			result = ResourceUsage.getFixedPointSqrt(merger, m_resultType.getPrimitiveType().getTotalBits());
		} else {
			result = ResourceUsage.getFloatingPointSqrt(merger, (DFEFloat)m_resultType.getPrimitiveType());
		}
		return result * m_resultType.getPrimitiveCount();
	}

	@Override
	int getLatencyEstimate(Merger merger) {
		return LatencyEstimation.getSqrt(merger, m_resultType);
	}

}
