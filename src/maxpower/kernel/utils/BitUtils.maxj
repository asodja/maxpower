package maxpower.kernel.utils;

import java.util.Arrays;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObject;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class BitUtils {
	/**
	 * @return <tt>true</tt> if any bits in any value are '1'.
	 */
	public static DFEVar any(KernelObject<?>... vals) {
		return any(Arrays.asList(vals));
	}

	/**
	 * @return <tt>true</tt> if any bits in any value are '1'.
	 */
	public static <T extends KernelObject<?>> DFEVar any(List<T> vals) {
		return (Bitops.catLsbToMsb(vals) !== 0);
	}

	/**
	 * @return <tt>true</tt> if all bits in all values are '1'.
	 */
	public static DFEVar all(KernelObject<?>... vals) {
		return all(Arrays.asList(vals));
	}

	/**
	 * @return <tt>true</tt> if all bits in all values are '1'.
	 */
	public static <T extends KernelObject<?>> DFEVar all(List<T> vals) {
		DFEVar raw     = Bitops.catLsbToMsb(vals);
		int    numBits = raw.getType().getTotalBits();
		DFEVar allOnes = raw.getKernel().constant.var(DFETypeFactory.dfeRawBits(numBits), Bits.allOnes(numBits));

		return (raw === allOnes);
	}
}
