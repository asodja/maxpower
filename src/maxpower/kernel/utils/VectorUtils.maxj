package maxpower.kernel.utils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.maxeler.maxcompiler.v2.errors.MaxCompilerAPIError;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObjectVectorizable;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class VectorUtils {
	/**
	 * Get a specified field as a {@link DFEVector} from a DFEVector of {@link DFEStruct}.
	 *
	 * @param input DFEVector of DFEStructs.
	 * @param fieldName Name of the field we wish to extract.
	 * @return DFEVector<T> containing a an element from each DFEStruct.
	 */
	public static <T extends KernelObjectVectorizable<T,?>>
	DFEVector<T> getStructMember(DFEVector<DFEStruct> input, String fieldName) {
		final List<T> vars = new ArrayList<T>(input.getSize());
		for (int i = 0; i < input.getSize(); i++) {
			T var = input[i][fieldName];
			vars.add(var);
		}
		return DFEVectorType.newInstance(vars);
	}

	/**
	 * Set a specified structure member in a {@link DFEVector} of {@link DFEStruct}.
	 *
	 * @param input DFEVector of DFEStructs.
	 * @param fieldName Name of the field we wish to extract.
	 * @param value DFEVector<T> containing values to be set in each DFEStruct.
	 */
	public static <T extends KernelObjectVectorizable<T,?>>
	void setStructMember(DFEVector<DFEStruct> input, String fieldName, DFEVector<T> value) {
		for (int i = 0; i < input.getSize(); i++) {
			input[i].set(fieldName, value[i]);
		}
	}

	/**
	 * Slice a specified number of elements out of a {@link DFEVector}.
	 *
	 * @param input DFEVector to slice elements out of.
	 * @param start The index of the first element.
	 * @param size The number of elements expected in the output.
	 * @return A DFEVector containing contiguous elements from the input.
	 */
	public static <T extends KernelObjectVectorizable<T,?>>
	DFEVector<T> slice(DFEVector<T> input, int start, int size) {
		List<T> output = input.getElementsAsList().subList(start, start + size);
		return DFEVectorType.newInstance(output);
	}

	/**
	 *  Concatenate two DFEVectors together into a single DFEVector.
	 *
	 * @param first The first N elements of the output.
	 * @param second The next M elements of the output.
	 * @return A DFEVector containing all elements of first followed by all elements of second.
	 */
	public static <T extends KernelObjectVectorizable<T,?>>
	DFEVector<T> cat(DFEVector<T> first, DFEVector<T> second) {
		if (!(first.getType().getContainedType().equalsIgnoreMax(second.getType().getContainedType()))) {
			throw new MaxCompilerAPIError("Types for DFEVectors must match in order to concatenate them.");
		}
		List<T> output = first.getElementsAsList();
		output.addAll(second.getElementsAsList());
		return DFEVectorType.newInstance(output);
	}

	/**
	 * Rotate the elements in a DFEVector by a specified distance. Use positive distances to rotate the vector to the right, negative to rotate to the left.
	 *
	 * @param input The DFEVector to be rotated
	 * @param distance The distance to rotate the DFEVector, distance can be positive or negative and larger than the size of the vector (will then rotate by distance modulo size).
	 * @return The rotated DFEVector
	 */
	public static <T extends KernelObjectVectorizable<T,?>>
	DFEVector<T> rotate(DFEVector<T> input, int distance) {
		List<T> output = new ArrayList<T>(input.getElementsAsList());
		Collections.rotate(output, distance);
		return DFEVectorType.newInstance(output);
	}

	/**
	 * Switches the dimensions of a List of DFEVecotors.
	 * E.g. you have a list of 3 DFEVectors of size 2 then the result will be a List
	 * of 2 DFEVectors with size 3. The first element of all 3 DFEVectors will end up in the
	 * first DFEVector in the list and the second element of all 3 DFEVectors will end up in the second
	 * DFEVector in the list.
	 *
	 * @param input List of DFEVectors
	 * @param Row to colum transposed List of DFEVEctors
	 */
	public static <T extends KernelObjectVectorizable<T,?>>
	List<DFEVector<T>> rowsToColumns(List<DFEVector<T>> input) {
		List<DFEVector<T>> result = new ArrayList<DFEVector<T>>();
		List<List<T>> list = new ArrayList<List<T>>();
		for (int i = 0; i < input[0].getSize(); i++) {
			list.add(new ArrayList<T>());
			for (DFEVector<T> v : input) {
				list[i].add(v[i]);
			}
		}

		for (List<T> l : list) {
			result.add(DFEVectorType.newInstance(l));
		}
		return result;
	}

	/**
	 * Switches the dimensions of a DFEVector of DFEVecotors.
	 * E.g. you have a DFEVector of 3 DFEVectors of size 2 then the result will be a DFEVector
	 * of 2 DFEVectors with size 3. The first element of all 3 DFEVectors will end up in the
	 * first DFEVector in the outer DFEVector and the second element of
	 * all 3 DFEVectors will end up in the second DFEVector in the outer DFEVector.
	 *
	 * @param input List of DFEVectors
	 * @param Row to colum transposed List of DFEVEctors
	 */
	public static <T extends KernelObjectVectorizable<T,?>>
	DFEVector<DFEVector<T>> rowsToColumns(DFEVector<DFEVector<T>> input) {
		return DFEVectorType.newInstance(rowsToColumns(input.getElementsAsList()));
	}

}
