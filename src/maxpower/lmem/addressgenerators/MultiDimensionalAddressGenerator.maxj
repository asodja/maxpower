package maxpower.lmem.addressgenerators;

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;

public class MultiDimensionalAddressGenerator extends Kernel {

	private final int latency = 3;//On multi-block case will output once every 4 cycles (this is as fast as the memory controller can handle, and allows for the latency of reading a ROM).

	MultiDimensionalAddressGenerator(KernelParameters parameters, int numDimensions, int maxBlocks) {
		super(parameters);
		if (numDimensions < 1) {
			throw new RuntimeException("Unsupported");
		}
		if (maxBlocks < 1) {
			throw new RuntimeException("Unsupported");
		}

		DFEStruct cmd = LMemCommandStream.getLMemCommandDFEStructType().newInstance(this);
		DFEType addressType = (DFEType)cmd["address"].getType();
		DFEType sizeType    = (DFEType)cmd["size"].getType();

		DFEVar numRepeats = io.scalarInput("numRepeats", dfeUInt(32));

		DFEVar address;
		DFEVar finalCmd;
		DFEVar size;
		DFEVar enableOutput;

		if (maxBlocks == 1) {
			DFEVar startAddress = io.scalarInput("startAddress", addressType);
			DFEVar numBursts    = io.scalarInput("numBursts",    addressType);

			CounterChain chain = control.count.makeCounterChain();
			DFEVar repeat = chain.addCounter(numRepeats,   1);
			finalCmd = repeat === numRepeats - 1;
			for (int dim = numDimensions; dim > 1; dim--) {
				DFEVar sizend = io.scalarInput("size"+dim+"d", addressType);
				DFEVar skipnd = io.scalarInput("skip"+dim+"d", addressType);
				DFEVar posnd  = chain.addCounter(sizend, 1);
				finalCmd &= posnd === sizend - 1;
				startAddress += posnd * skipnd;//TODO: use accumulator to avoid multiplication
			}
			DFEVar offset = chain.addCounter(numBursts,  128);
			finalCmd &= offset + 128 >= numBursts;

			enableOutput = constant.var(true);

			DFEVar burstsLeft = numBursts - offset;
			address  = startAddress + offset;
			size     = burstsLeft < 128 ? burstsLeft.cast(sizeType) : 128;
		} else {
			DFEVar numBlocks = io.scalarInput("numBlocks", dfeUInt(MathUtils.bitsToRepresent(maxBlocks)));

			DFEVar prevBlockNum = numBlocks.getType().newInstance(this);
			DFEVar startAddress = mem.romMapped("startAddress", prevBlockNum, addressType, maxBlocks);
			DFEVar numBursts    = mem.romMapped("numBursts",    prevBlockNum, addressType, maxBlocks);

			CounterChain chain = control.count.makeCounterChain();
			DFEVar repeat   = chain.addCounter(numRepeats,    1);
			finalCmd = repeat === numRepeats - 1;
			DFEVar blockNum = chain.addCounter(numBlocks,     1);
			finalCmd &= blockNum === numBlocks - 1;
			for (int dim = numDimensions; dim > 1; dim--) {
				DFEVar sizend = mem.romMapped("size"+dim+"d", prevBlockNum, addressType, maxBlocks);
				DFEVar skipnd = mem.romMapped("skip"+dim+"d", prevBlockNum, addressType, maxBlocks);
				DFEVar posnd  = chain.addCounter(sizend, 1);
				finalCmd &= posnd === sizend - 1;
				startAddress += posnd * skipnd;//TODO: use accumulator to avoid multiplication
			}
			DFEVar offset   = chain.addCounter(numBursts,   128);
			finalCmd &= offset + 128 >= numBursts;
			DFEVar cycle    = chain.addCounter(latency + 1,   1);

			prevBlockNum <== safeOffset(blockNum, -latency);
			enableOutput = latency === cycle;

			DFEVar burstsLeft = numBursts - offset;
			address   = startAddress + offset;
			size      = burstsLeft < 128 ? burstsLeft.cast(sizeType) : 128;
			finalCmd &= enableOutput;
		}

		cmd["address"] = address;
		cmd["size"]    = size;
		cmd["inc"]     = constant.var((DFEType)cmd["inc"].getType(),    1);
		cmd["stream"]  = constant.var((DFEType)cmd["stream"].getType(), 1);
		cmd["tag"]     = finalCmd;

		LMemCommandStream.makeKernelOutput("cmd", enableOutput, cmd);

		DFEVar finished = Reductions.streamHold(finalCmd, finalCmd);
		optimization.pushPipeliningFactor(0.0);
		DFEVar trigger = finished & ~finalCmd;
		optimization.popPipeliningFactor();

		flush.onTrigger(trigger);
	}

	private DFEVar safeOffset(DFEVar input, int offset) {
		DFEVar cycleCount = control.count.simpleCounter(48);
		return cycleCount < -offset ? 0 : stream.offset(input, offset);
	}
}
