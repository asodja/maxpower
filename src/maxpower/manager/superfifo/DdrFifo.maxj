package maxpower.manager.superfifo;

import com.maxeler.maxcompiler.v2.errors.MaxCompilerAPIError;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.managers.DFEManager;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmOutput;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmStateValue;
import com.maxeler.maxcompiler.v2.statemachine.DFEsmValue;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPullOutput;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushInput;
import com.maxeler.maxcompiler.v2.statemachine.manager.DFEsmPushOutput;
import com.maxeler.maxcompiler.v2.statemachine.manager.ManagerStateMachine;
import com.maxeler.maxcompiler.v2.statemachine.stdlib._State;
import com.maxeler.maxcompiler.v2.statemachine.types.DFEsmValueType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.statemachine.utils.SMUtils;

public class DdrFifo extends ManagerStateMachine {
	public static boolean hasDebugScalars = false;

	public final int burstSizeBits ;
	public static final long memorySizeBits = (24L*1024L*1024L*1024L*8);
	public final long maxNumBursts;
	private final long depth;
	private final int almostEmptyThreshold = 16;
	private final int almostFullThreshold = 16;
	private final int wrapBitIndex;

	private final DFEStructType cmdType;
	private final DFEsmPushInput input;
	private final DFEsmPullOutput output;
	private final DFEsmPushOutput memCmdOutput;
	private final DFEsmPushInput memEchoInput;
	private final DFEsmPushOutput dataToMem;
	private final DFEsmPushInput dataFromMem;
	private final DFEsmStateValue memWritePointer;
	private final DFEsmStateValue memReadPointer;
	private final DFEsmStateValue toMemStalling;
	private final DFEsmStateValue memCmdStalling;
	private final DFEsmStateValue memFifoFull;
	private final DFEsmStateValue memFifoEmpty;
	private final DFEsmStateValue memFifoAlmostFull;
	private final DFEsmStateValue memFifoAlmostEmpty;
	private final DFEsmStateValue memFifoFillLevel;
	private final DFEsmStateValue memCmdReg;
	private final DFEsmStateValue memCmdRegValid;
	private final DFEsmStateValue memWriteCommitPointer;
	private final DFEsmStateValue memWriteEchoPointer;
	private final DFEsmStateValue inputValidReg;
	private final DFEsmStateValue outputValidReg;
	private final DFEsmStateValue memReadCommitPointer;
	private final DFEsmStateValue internalFifoFull;
	private final int writeStreamID;
	private final int readStreamID;
	private final long baseAddressBursts;
	private final DFEsmValueType addressType;
	private final DFEsmStateValue dataFromMemReg;
	private final DFEsmStateValue dataFromMemRegValid;
	private final DFEsmStateValue shouldStallDownstream;
	private final DFEsmOutput memCmdStallingScalar;
	private final DFEsmOutput internalFifoFullScalar;
	private final DFEsmOutput memFifoFillLevelScalar;
	private final DFEsmOutput shouldStallDownstreamScalar;
	private final DFEsmOutput memWritePointerScalar;
	private final DFEsmOutput memReadPointerScalar;
	private final DFEsmOutput memFifoAlmostFullScalar;
	private final DFEsmOutput memFifoAlmostEmptyScalar;
	private final WideFifo internalFifo;

	public static final String OUTPUT_MEM_COMMAND = "memCmd";
	public static final String INPUT_COMMAND_ECHO = "cmdEcho";
	public static final String OUTPUT_MEM_DATA = "dataToMem";
	public static final String INPUT_MEM_DATA = "dataFromMem";
	public static final String OUTPUT_DATA = "output";
	public static final String INPUT_DATA = "input";

	public DdrFifo(final DFEManager owner, final LMemInterface iface,
			final long baseAddressBursts, final long depthBursts, final int writeStreamID, final int readStreamID) {
		super(owner);
		//TODO Add read/write stream width as parameter - still deal in bursts, but multi-cycle read/write if needed

		burstSizeBits = (int) iface.getBurstSizeBits();
		maxNumBursts = memorySizeBits / burstSizeBits;

		logInfo("DDR FIFO: burstSizeBits = %d, maxNumBursts = %d, writeStreamID = %d, readStreamID = %d, depthBursts = %d, basAddressBursts=%d\n",
				burstSizeBits, maxNumBursts,
				writeStreamID, readStreamID, depthBursts, baseAddressBursts);

		cmdType = LMemCommandStream.getLMemCommandDFEStructType();

		depth = depthBursts;
		this.writeStreamID = writeStreamID;
		this.readStreamID = readStreamID;
		this.baseAddressBursts = baseAddressBursts;
		addressType = dfeUInt(MathUtils.bitsToAddress(baseAddressBursts + depthBursts));

		if (!MathUtils.isPowerOf2((int)depthBursts))
			throw new MaxCompilerAPIError("Depth (%d) needs to be a power of 2. Nearest larger value is %d\n", depthBursts,
					MathUtils.nextPowerOfTwo((int)depthBursts));

		memCmdReg = _State.value(state, dfeUInt(cmdType.getTotalBits()), "memCmdReg");
		memCmdRegValid = _State.value(state, dfeBool(), false, "memCmdRegValid");
		memCmdOutput = io.pushOutput(OUTPUT_MEM_COMMAND, dfeUInt(cmdType.getTotalBits()), 4);
		memEchoInput = io.pushInput(INPUT_COMMAND_ECHO, dfeUInt(cmdType.getTotalBits()), 16);
		dataToMem = io.pushOutput(OUTPUT_MEM_DATA, dfeUInt(burstSizeBits), 16);
		dataFromMem = io.pushInput(INPUT_MEM_DATA, dfeUInt(burstSizeBits), 16);

		final DFEsmValueType pointerType = dfeUInt(1 + MathUtils.bitsToAddress(depthBursts));
		memWriteCommitPointer = _State.value(state, pointerType, 0, "memWriteCommitPointer");
		memWriteEchoPointer = _State.value(state, pointerType, 0, "memWriteEchoPointer");
		memReadCommitPointer = _State.value(state, pointerType, 0, "memReadCommitPointer");
		memWritePointer = _State.value(state, pointerType, 0, "memWritePointer");
		memReadPointer = _State.value(state, pointerType, 0, "memReadPointer");
		wrapBitIndex = pointerType.getTotalBits() - 1;

		toMemStalling = _State.value(state, dfeBool(), true, "toMemStalling");
		memCmdStalling = _State.value(state, dfeBool(), true, "memCmdStalling");

		memFifoFull = _State.value(state, dfeBool(), true, "memFifoFull");
		memFifoEmpty = _State.value(state, dfeBool(), true, "memFifoEmpty");
		memFifoAlmostFull = _State.value(state, dfeBool(), true, "memFifoAlmostFull");
		memFifoAlmostEmpty = _State.value(state, dfeBool(), true, "memFifoAlmostEmpty");

		shouldStallDownstream = _State.value(state, dfeBool(), true, "shouldStallDownstream");

		memFifoFillLevel = _State.value(state, dfeUInt(MathUtils.bitsToRepresent(depthBursts)), 0, "memFifoFillLevel");

		//TODO Move this to superFifo? At least reduce width to type rather than burst
		int internalFifoDepth = 512;
		int progEmptyLevel = 32;
		int progFullLevel = internalFifoDepth-64;
		internalFifo = new WideFifo(this, burstSizeBits, internalFifoDepth, progEmptyLevel, progFullLevel);

		input = io.pushInput(INPUT_DATA, dfeUInt(burstSizeBits), 16);
		output = io.pullOutput(OUTPUT_DATA, dfeUInt(burstSizeBits), 16);

		inputValidReg = _State.value(state, dfeBool(), false, "inputValidReg");
		outputValidReg = _State.value(state, dfeBool(), false, "outputValidReg");

		internalFifoFull = _State.value(state, dfeBool(), true, "internalFull");

		dataFromMemReg = _State.value(state,  dfeUInt(burstSizeBits), "dataFromMemReg");
		dataFromMemRegValid = _State.value(state,  dfeBool(), "dataFromMemRegValid");

		if (hasDebugScalars) {
			memCmdStallingScalar        = io.scalarOutput("memCmdStalling", dfeBool());
			internalFifoFullScalar      = io.scalarOutput("internalFifoFull", dfeBool());
			memFifoFillLevelScalar      = io.scalarOutput("memFifoFillLevel", dfeUInt(MathUtils.bitsToRepresent(depthBursts)));
			memWritePointerScalar       = io.scalarOutput("memWritePointer", pointerType);
			memReadPointerScalar        = io.scalarOutput("memReadPointer", pointerType);
			shouldStallDownstreamScalar = io.scalarOutput("shouldStallDownstream", dfeBool());
			memFifoAlmostFullScalar     = io.scalarOutput("memFifoAlmostFull", dfeBool());
			memFifoAlmostEmptyScalar    = io.scalarOutput("memFifoAlmostEmpty", dfeBool());
		} else {
			memCmdStallingScalar        = null;
			internalFifoFullScalar      = null;
			memFifoFillLevelScalar      = null;
			memWritePointerScalar       = null;
			memReadPointerScalar        = null;
			shouldStallDownstreamScalar = null;
			memFifoAlmostFullScalar     = null;
			memFifoAlmostEmptyScalar    = null;
		}

	}

	@Override
	protected void nextState() {
		internalFifoFull.next <== internalFifo.getProgFull();
		inputValidReg.next <== input.valid;
		outputValidReg.next <== output.read;
		toMemStalling.next <== dataToMem.stall;
		memCmdStalling.next <== memCmdOutput.stall;
		shouldStallDownstream.next <== dataToMem.stall | memFifoAlmostFull;

		IF (outputValidReg !== inputValidReg) {
			IF (outputValidReg) {
				memFifoFillLevel.next <== memFifoFillLevel - 1;
			} ELSE {
				memFifoFillLevel.next <== memFifoFillLevel + 1;
			}
		}
		IF (memEchoInput.valid) {
			memWriteEchoPointer.next <== memWriteEchoPointer + 1;
		}

		IF (inputValidReg) memWritePointer.next <== memWritePointer + 1;
		IF (outputValidReg) memReadPointer.next <== memReadPointer + 1;

		IF (inputValidReg) printf("memFifoFillLevel = %d, memWritePointer = %d, memReadPointer = %d\n", memFifoFillLevel, memWritePointer, memReadPointer);

		memFifoEmpty.next <== memWritePointer === memReadPointer;
		memFifoFull.next <== (memWritePointer[wrapBitIndex - 1:0] === memReadPointer[wrapBitIndex - 1:0]) &
							 (memWritePointer[wrapBitIndex] !== memReadPointer[wrapBitIndex]);

		memFifoAlmostEmpty.next <== memFifoFillLevel <= almostEmptyThreshold;
		memFifoAlmostFull.next <== memFifoFillLevel >= (depth - almostFullThreshold);

		dataFromMemRegValid.next <== dataFromMem.valid;
		dataFromMemReg.next <== dataFromMem;

		internalFifo.next(dataFromMemRegValid, dataFromMemReg);

		memCmdRegValid.next <== false;

		IF (~memCmdStalling) {
			printf("memWritePointer = %d, memWriteCommitPointer = %d, memReadCommitPointer = %d\n",
					memWritePointer, memWriteCommitPointer, memReadCommitPointer);
			IF (memWritePointer !== memWriteCommitPointer) {
				memCmdRegValid.next <== true;
				memWriteCommitPointer.next <== memWriteCommitPointer + 1;
				makeLMemCommand(memCmdReg, memWriteCommitPointer, true);
			} ELSE IF (~internalFifoFull & (memReadCommitPointer !== memWriteEchoPointer)) {
				//TODO only request based on fill level (commit - read) + availability (echo - commit) - relies on progFull?
				memCmdRegValid.next <== true;
				memReadCommitPointer.next <== memReadCommitPointer + 1;
				makeLMemCommand(memCmdReg, memReadCommitPointer, false);
			}
		}
	}

	@Override
	protected void outputFunction() {
		dataToMem.valid <== input.valid;
		input.stall <== shouldStallDownstream;
		dataToMem <== input;


		output.empty <== internalFifo.getEmpty();
		output.almostEmpty <== internalFifo.getProgEmpty();

		internalFifo.connectReadEnable(output.read);
		output <== internalFifo.getDataOut();

		memCmdOutput <== memCmdReg;
		memCmdOutput.valid <== memCmdRegValid;

		memEchoInput.stall <== false;

//		IF (memCmdRegValid) debug.printf("Pushing out memory command: %x\n", memCmdReg);

		dataFromMem.stall <== internalFifoFull;

		if (hasDebugScalars) {
			memCmdStallingScalar <== memCmdStalling;
			internalFifoFullScalar <== internalFifoFull;
			memFifoFillLevelScalar <== memFifoFillLevel;
			shouldStallDownstreamScalar <== shouldStallDownstream;
			memWritePointerScalar <== memWritePointer;
			memReadPointerScalar <== memReadPointer;
			memFifoAlmostFullScalar <== memFifoAlmostFull;
			memFifoAlmostEmptyScalar <== memFifoAlmostEmpty;
		}
	}

	/**
	 * Convert buffer pointer to LMem address by stripping off the wrap bit and
	 * adding the base address.
	 *
	 * @param pointer Buffer pointer to convert.
	 * @return Address relating to the buffer pointer.
	 */
	private DFEsmValue pointerToAddress(final DFEsmValue pointer) {
		final DFEsmValue address = pointer[wrapBitIndex - 1:0].cast(dfeUInt(wrapBitIndex));
		return constant.value(addressType, baseAddressBursts) + address.cast(addressType);
	}

	/**
	 * Generate a read/write command for LMem from the given address.
	 *
	 * @param cmd Destination for generated command.
	 * @param pointer Buffer pointer to generate memory address from.
	 * @param isWrite Boolean indication of whether command is read or write.
	 */
	private void makeLMemCommand(final DFEsmStateValue cmd, final DFEsmValue pointer, final boolean isWrite) {
		// 'Echo' flag is MS bit of address
		final int padBits = cmdType.getTypeForField("address").getTotalBits() - addressType.getTotalBits() - 1;
		final DFEsmValue address = constant.value(dfeUInt(1), isWrite ? 1L : 0L)
				# constant.value(dfeUInt(padBits), 0)
				# pointerToAddress(pointer);
		SMUtils.assignField(cmd.next, cmdType, "address", address);
		SMUtils.assignField(cmd.next, cmdType, "size", 1);
		SMUtils.assignField(cmd.next, cmdType, "inc", 1);
		SMUtils.assignField(cmd.next, cmdType, "tag", 0);
		SMUtils.assignField(cmd.next, cmdType, "stream", 1 << (isWrite ? writeStreamID : readStreamID));
	}

	void printf(String format, Object ...args) {
//		debug.printf(format, args);
	}
}
