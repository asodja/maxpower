package maxpower.blas.l3;

import maxpower.kernel.KernelBinaryOp.Add;
import maxpower.kernel.arithmetic.FloatingPointMultiAdder;
import maxpower.kernel.io.ShiftRegister;
import maxpower.kernel.pipeline.FanoutLimiter;
import maxpower.utils.TreeReduce;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.Optimization.PipelinedOps;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxdc.altera.platform.AlteraPlatform;

/**
 * A tile multiplier for use in dense matrix multiplication.
 *
 * NB. Supports only square tiles.
 *
 * @author Chris Jones
 */
public class TileMultiplier extends KernelLib {
	private static final int FANOUT_LIMIT = 16;

	private final DFEVar output;

	/**
	 * Create a tile multiplier.
	 *
	 * @param N    size of tile in one dimension (tiles are NxN)
	 * @param aIn  A input matrix values
	 * @param bIn  B input matrix values
	 */
	public TileMultiplier(int N, DFEVar aIn, DFEVar bIn) {
		super(aIn.getKernel());

		CounterChain cc = control.count.makeCounterChain();
		DFEVar oddTile = cc.addCounter(2, 1); // counter will wrap, giving 0, 1, 0, 1, ...
		       /* i */   cc.addCounter(N, 1).setReportOnUnused(false);
		DFEVar    j    = cc.addCounter(N, 1);

		// By encoding 'i' in one hot, 'i === n' becomes 'iOneHot.slice(n)' (see below).
		// As 'i' is just an incrementing counter, we can use a rotating counter with the same enable
		// to produce the one hot encoded value.
		DFEVar iOneHot = oneHotCounter(N, cc.getCurrentCounterWrap());

		FanoutLimiter<DFEVar> wrAddr = limitFanout(j #  oddTile);
		FanoutLimiter<DFEVar> rdAddr = limitFanout(j # ~oddTile);
		FanoutLimiter<DFEVar> jZero  = limitFanout(j === 0);
		FanoutLimiter<DFEVar> bInFl  = limitFanout(bIn);

		DFEVector<DFEVar> aVec = ShiftRegister.serialToParallel(N, aIn);

		DFEVar[] summands = new DFEVar[N];

		for (int n = 0; n < N; ++n) {
			DFEVar a = Reductions.streamHold(aVec[n], jZero.get());

			// double buffer within a single memory
			Memory<DFEVar> bBuf = mem.alloc(bIn.getType(), 2*N);
			// write vertically; read horizontally
			bBuf.write(wrAddr.get(), bInFl.get(), iOneHot.slice(n));

			// stream offset into future, so we can see entire tile within the buffer and read it transposed
			DFEVar b = stream.offset(bBuf.read(rdAddr.get()), +N*N);

			if ((getManager().getBuildManager().getPlatform() instanceof AlteraPlatform)
					&& (aIn.getType() instanceof DFEFloat)) {
				optimization.pushPipeliningFactor(0.1, PipelinedOps.ALL);
			} else {
				optimization.pushPipeliningFactor(0.7, PipelinedOps.ALL);
			}

			summands[n] = a * b;

			optimization.popPipeliningFactor(PipelinedOps.ALL);
		}

		if (aIn.getType() instanceof DFEFloat) {
			output = FloatingPointMultiAdder.add(summands);
		} else {
			output = TreeReduce.reduce(new Add<DFEVar>(), summands);
		}
	}

	public DFEVar getOutput() {
		return output;
	}

	private DFEVar oneHotCounter(int width, DFEVar enable) {
		DFEVar v = dfeRawBits(width).newInstance(this);
		v <== stream.offset(Reductions.streamHold(v.rotateLeft(1), enable, v.getType().encodeConstant(1)), -1);
		return v;
	}

	private static FanoutLimiter<DFEVar> limitFanout(DFEVar v) {
		return new FanoutLimiter<DFEVar>(v, FANOUT_LIMIT);
	}
}
