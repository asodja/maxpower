package maxpower.kernel.io;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class VariableWidthIOTest {

	private class InputTestData {
		private final int inputWidth;
		private int dataLength;
		private final int paddedDataLength;
		private final int[] getCounts;
		private final double[] data;
		private final double[][] expectedOutput;
		private final boolean flushAtEnd;

		protected InputTestData(int inputWidthIn,  int[] getCountsIn) {
			inputWidth = inputWidthIn;
			dataLength = 0;
			getCounts = getCountsIn;

			for (int i = 0; i < getCountsIn.length; i++) dataLength += getCountsIn[i];
			paddedDataLength = ((dataLength-1)/inputWidthIn + 1)*dataLength;
			data = new double[paddedDataLength];
			expectedOutput = new double[getCounts.length][];

			for (int i = 0; i < dataLength; i++) {
				data[i] = i+1;
			}

			int dataitr = 0;
			for (int i = 0; i < getCounts.length; i++) {
				expectedOutput[i] = new double[getCounts[i]];
				for (int j = 0; j < getCounts[i]; j++) {
					expectedOutput[i][j] = data[dataitr];
					dataitr++;
				}
			}
			if (dataLength%inputWidth == 0) flushAtEnd = false; else flushAtEnd = true;
		}

		protected List<Bits> encodeInput(DFEType dataType) {
			final List<Bits> encodedData = new ArrayList<Bits>(MathUtils.ceilDivide(data.length, inputWidth));
			for (int i = 0; i < paddedDataLength; i++) {
				encodedData.add(dataType.encodeConstant(data[i]));
			}
			return encodedData;
		}

		protected List<Bits> encodeCounts(DFEType indexType) {
			final List<Bits> encodedCounts = new ArrayList<Bits>(getCounts.length);
			for (int i = 0; i < getCounts.length; i++) {
				encodedCounts.add(indexType.encodeConstant(getCounts[i]));
			}
			return encodedCounts;
		}

		protected double[][] decodeOutput(List<Bits> input, DFEType dataType) {
			double[][] output = new double [getCounts.length][];

			for (int i = 0; i < getCounts.length; i++) {
				output[i] = new double[getCounts[i]];

				for (int j = 0; j < getCounts[i]; j++) {
					output[i][j] = dataType.decodeConstant(input[i].getBitsRaw(j*dataType.getTotalBits(),dataType.getTotalBits()));
				}
			}
			return output;
		}

		protected double[][] getExpectedOutput() { return expectedOutput; }

		protected boolean getFlushAtEnd() { return flushAtEnd; }
	}

	private class OutputTestData {
		private final int outputWidth;
		private int dataLength;
		private final int nOutputs;
		private final int[] dataCounts;
		private final double[] data;
		private final double[][] expectedOutput;
		private final boolean flushAtEnd;

		protected OutputTestData(int outputWidthIn, int[] dataCountsIn) {

			outputWidth = outputWidthIn;
			dataCounts = dataCountsIn;
			dataLength = 0;
			for (int i = 0; i < dataCountsIn.length; i++) dataLength += dataCounts[i];
			nOutputs = (dataLength - 1)/outputWidth + 1;

			data = new double[dataCountsIn.length*outputWidth];
			expectedOutput = new double[nOutputs][outputWidth];
			int dataitr = 0;
			int validdataitr = 1;
			int invaliddataitr =  -1;
			for (int i = 0; i < dataCounts.length; i++) {
				for (int j = 0; j < outputWidth; j++) {
					if (j < dataCounts[i]) {
						data[dataitr] = validdataitr;
						validdataitr++;
					} else {
						data[dataitr] = invaliddataitr;
						invaliddataitr--;
					}
					dataitr ++;
				}
			}

			dataitr = 1;
			for (int i = 0; i < nOutputs; i++) {
				for (int j = 0; j < outputWidth; j++) {
					if (dataitr <= dataLength){
						expectedOutput[i][j] = dataitr;
						dataitr++;
					} else {
						expectedOutput[i][j] = Double.NaN;
					}
				}
			}

			if (dataLength%outputWidth == 0) flushAtEnd = false; else flushAtEnd = true;;
		}

		protected List<Bits> encodeInput(DFEType dataType) {
			final List<Bits> encodedData = new ArrayList<Bits>(MathUtils.ceilDivide(data.length, outputWidth));
			for (int i = 0; i < data.length; i++) {
				encodedData.add(dataType.encodeConstant(data[i]));
			}
			return encodedData;
		}

		protected List<Bits> encodeCounts(DFEType indexType) {
			final List<Bits> encodedCounts = new ArrayList<Bits>(dataCounts.length);
			for (int i = 0; i < dataCounts.length; i++) {
				encodedCounts.add(indexType.encodeConstant(dataCounts[i]));
			}
			return encodedCounts;
		}

		protected double[][] decodeOutput(List<Bits> input, DFEType dataType) {
			double[][] output = new double [nOutputs][outputWidth];
			for (int i = 0; i < nOutputs; i++) {
				for (int j = 0; j < outputWidth; j++) {
					output[i][j] = dataType.decodeConstant(input[i].getBitsRaw(j*dataType.getTotalBits(),dataType.getTotalBits()));
				}
			}
			return output;
		}


		protected double[][] getExpectedOutput() { return expectedOutput; }

		protected boolean getFlushAtEnd() { return flushAtEnd; }

		protected int getDataLength() { return dataLength; }
	}

	private class VariableWidthIOInputTestKernel extends Kernel {
		protected VariableWidthIOInputTestKernel (KernelParameters parameters, DFEVectorType<DFEVar> vectorType, int inputWidth, boolean doFlushAtEnd) {
			super(parameters);

			DFEVar maxTicks = io.scalarInput("maxTicks", dfeUInt(32));
			DFEVar tickCount = control.count.makeCounterChain().addCounter(maxTicks, 1);
			DFEVar doFlush = tickCount === (maxTicks-1);

			DFEVar needCount = io.input("needCount", dfeUInt(32));
			DFEVector<DFEVar> input;
			if (doFlushAtEnd) {
				input = VariableWidthIO.input("input", vectorType, needCount, vectorType.getContainedType().getTotalBits()*inputWidth, doFlush);
			} else {
				input = VariableWidthIO.input("input", vectorType, needCount);
			}

			io.output("output",input,input.getType());
		}
	}

	private class VariableWidthIOOutputTestKernel extends Kernel {
		protected VariableWidthIOOutputTestKernel (KernelParameters parameters, DFEVectorType<DFEVar> vectorType, int inputWidth, boolean doFlushAtEnd) {
			super(parameters);

			DFEVar maxTicks = io.scalarInput("maxTicks", dfeUInt(32));
			DFEVar tickCount = control.count.makeCounterChain().addCounter(maxTicks, 1);
			DFEVar doFlush = tickCount === (maxTicks-1);

			DFEVar writeCount = io.input("needCount", dfeUInt(32));
			DFEVector<DFEVar> input = io.input("input", vectorType);

			if (doFlushAtEnd) {
				VariableWidthIO.output("output",input,writeCount, vectorType.getContainedType().getTotalBits()*inputWidth, doFlush);
			} else {
				VariableWidthIO.output("output",input,writeCount);
			}
		}
	}

	private void testFlexibleWidthInput(final int inputWidth, final int[] getCounts) {
		final DFEType type   = KernelLib.dfeFloat(11,53);
		final DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(type,inputWidth);
		final DFEType indexType   = KernelLib.dfeUInt(32);

		InputTestData data = new InputTestData(inputWidth, getCounts);

		SimulationManager m = new SimulationManager("FlexibleWidthInputTest");
		m.setKernel(new VariableWidthIOInputTestKernel(m.makeKernelParameters(), vectorType, inputWidth, data.getFlushAtEnd()));
		m.setKernelCycles(getCounts.length);
		m.setScalarInput("maxTicks", KernelLib.dfeUInt(32).encodeConstant(getCounts.length));
		m.setInputDataRaw("input", data.encodeInput(type));
		m.setInputDataRaw("needCount", data.encodeCounts(indexType));
		m.build();
		m.run();

		double[][] output = data.decodeOutput(m.getOutputDataRaw("output"), type);
		double[][] expectedOutput = data.getExpectedOutput();
		for (int i = 0; i < output.length; i++) {
			System.out.println("Expected " + Arrays.toString(expectedOutput[i]));
			System.out.println("Got      " + Arrays.toString(output[i]) + "\n");
		}
		for (int i = 0; i < output.length; i++) {
			assertArrayEquals(expectedOutput[i],output[i],0.0);
		}
	}

	private void testFlexibleWidthOutput(final int outputWidth,  final int[] getCounts) {
		final DFEType type   = KernelLib.dfeFloat(11,53);
		final DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(type,outputWidth);
		final DFEType indexType   = KernelLib.dfeUInt(32);

		OutputTestData data = new OutputTestData(outputWidth,  getCounts);

		SimulationManager m = new SimulationManager("FlexibleWidthOutputTest");
		m.setKernel(new VariableWidthIOOutputTestKernel(m.makeKernelParameters(), vectorType, outputWidth, data.getFlushAtEnd()));
		m.setKernelCycles(getCounts.length);
		m.setScalarInput("maxTicks", KernelLib.dfeUInt(32).encodeConstant(getCounts.length));
		m.setInputDataRaw("input", data.encodeInput(type));
		m.setInputDataRaw("needCount", data.encodeCounts(indexType));
		m.build();
		m.run();

		double[][] output = data.decodeOutput(m.getOutputDataRaw("output"), type);
		double[][] expectedOutput = data.getExpectedOutput();
		for (int i = 0; i < output.length; i++) {
			System.out.println("Expected " + Arrays.toString(expectedOutput[i]));
			System.out.println("Got      " + Arrays.toString(output[i]) + "\n");
		}
		int dataitr = 0;
		for (int i = 0; i < output.length; i++) {
			for (int j = 0; j < output[i].length; j++){
				if (dataitr < data.getDataLength()){
					assertEquals(expectedOutput[i][j],output[i][j],0.0);
					dataitr++;
				}
			}
		}
	}

	@Test public void testInputAsPassThrough() { testFlexibleWidthInput(2, new int[]{2}); }
	@Test public void testInputReadingNothing() { testFlexibleWidthInput(2, new int[]{0,2,2,0,0,2,0}); }
	@Test public void testInputExactAspectChange() { testFlexibleWidthInput(10, new int[]{5,5,5,5}); }
	@Test public void testInputInExactAspectChange() { testFlexibleWidthInput(10, new int[]{4,4,4,4,4}); }
	@Test public void testInputWithSomeUnpleasantNumbers() { testFlexibleWidthInput(7, new int[]{2,3,5,7,2,1,1}); }
	@Test public void testInputWithSomeUnpleasantNumbersAndReadingNothing() { testFlexibleWidthInput(7, new int[]{2,0,3,5,0,7,2,1,1,0}); }
	@Test public void testInputWithSomeUnpleasantNumbersAndReadingNothingAndFlushing() { testFlexibleWidthInput(7, new int[]{2,0,3,5,0,7,2,1,1,0,3}); }
	@Test public void testOnePipeInput() { testFlexibleWidthInput(1, new int[]{0,1,1,0,0,0}); }

	@Test public void testOutputAsPassThrough() { testFlexibleWidthOutput(2, new int[]{2}); }
	@Test public void testOutputWritingNothing() { testFlexibleWidthOutput(2, new int[]{0,2,2,0,0,2,0}); }
	@Test public void testOutputExactAspectChange() { testFlexibleWidthOutput(10, new int[]{5,5,5,5}); }
	@Test public void testOutputInExactAspectChange() { testFlexibleWidthOutput(10, new int[]{4,4,4,4,4}); }
	@Test public void testOutputWithSomeUnpleasantNumbers() { testFlexibleWidthOutput(7, new int[]{2,3,5,7,2,1,1}); }
	@Test public void testOutputWithSomeUnpleasantNumbersAndReadingNothing() { testFlexibleWidthOutput(7, new int[]{2,0,3,5,0,7,2,1,1,0}); }
	@Test public void testOutputWithSomeUnpleasantNumbersAndReadingNothingAndFlushing() { testFlexibleWidthOutput(7, new int[]{2,0,3,5,0,7,2,1,1,0,3}); }
	@Test public void testOutputWithSomeLeftOverOnLastCycle() { testFlexibleWidthOutput(4, new int[]{2,4,4}); }
	@Test public void testOnePipeOutput() { testFlexibleWidthOutput(1, new int[]{0,1,1,0,0,1,0}); }

}

