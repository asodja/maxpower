package maxpower.kernel.io;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import maxpower.kernel.utils.JavaSimUtils;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.SimulationParams;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class AspectChangeIOTest {

	private static final int ITERATIONS = 7;

	private class TestData {
		private final List<Double> data;
		private final List<Double> goldenOutput;
		private final int       inputWidth;
		private final int       outputWidth;
		private final boolean   hasInputPadding;
		private final boolean   hasOutputPadding;
		private final int       length;

		protected TestData(int inputWidth, int outputWidth, int paddingMultiplier, int enableFrequency) {
			boolean hasPadding = paddingMultiplier != 0;
			hasInputPadding  = hasPadding && inputWidth > outputWidth;
			hasOutputPadding = hasPadding && inputWidth < outputWidth;
			final int padding = Math.min(inputWidth, outputWidth);
			this.length = inputWidth * outputWidth - paddingMultiplier * padding;
			final int length = this.length * ITERATIONS;
			data = new ArrayList<Double>(length);
			for (int i = 0; i < length; i++) {
				data.add(i * 1.0);
			}
			if (inputWidth >= outputWidth) {
				goldenOutput = new ArrayList<Double>(enableFrequency * length);
				for (int i = 0; i < enableFrequency * length / outputWidth; i++) {
					int start = (i / enableFrequency) * outputWidth;
					int end = start + outputWidth;
					goldenOutput.addAll(data.subList(start, end));
				}
			} else {
				goldenOutput = data;
			}
			this.inputWidth = inputWidth;
			this.outputWidth = outputWidth;
		}

		protected List<Bits> encodeInput(DFEType dataType) {
			int index = 0;
			List<Double> paddedInput = new ArrayList<Double>();
			for (int i = 0; i < ITERATIONS; i++) {
				for (int j = 0; j < MathUtils.ceilDivide(length, inputWidth); j++) {
					for (int k = 0; k < inputWidth; k++) {
						//add padding to the input if required
						if (!hasInputPadding || j < outputWidth - 1 || k < inputWidth - outputWidth) {
							index++;
						}
						paddedInput.add(data[index - 1]);
					}
				}
			}
			return JavaSimUtils.encodeInput(paddedInput, dataType, inputWidth * dataType.getTotalBits());
		}

		protected List<Double> decodeOutput(List<Bits> input, DFEType dataType) {
			List<Double> output = new ArrayList<Double>(length * ITERATIONS);
			int paddingFrequency = MathUtils.ceilDivide(length, outputWidth);
			int paddingSize = paddingFrequency * outputWidth - length;
			for (int i = 0; i < input.size(); i++) {
				DFEVectorType<DFEVar> arrayType = new DFEVectorType<DFEVar>(dataType, outputWidth);
				@SuppressWarnings("unchecked")
				List<Double> chunk = arrayType.decodeConstant(input[i]);
				for (int j = 0; j < outputWidth; j++) {
					//if it has padding on the output, then strip it out.
					if (!hasOutputPadding || j < outputWidth - paddingSize || (i % paddingFrequency) != (paddingFrequency - 1)) {
						if (output.size() < length * ITERATIONS) {
							output.add(chunk[j]);
						}
					}
				}
			}

			return output;
		}

		protected List<Double> getGoldenOuput() {
			return goldenOutput;
		}

		protected int getRunCycles() {
			return MathUtils.ceilDivide(data.size(), Math.min(inputWidth, outputWidth));
		}

		public int getLength() {
			return length;
		}
	}

	private class ACIOIoTestKernel extends Kernel {
		protected ACIOIoTestKernel(KernelParameters parameters, DFEType type, int inputWidth, int outputWidth, int enableFrequency) {
			super(parameters);
			final DFEVar enable = enableFrequency > 1 ? control.count.makeCounterChain().addCounter(enableFrequency, 1) === 0 : constant.var(true);
			final DFEVar length = io.scalarInput("length", dfeUInt(32));
			if (inputWidth >= outputWidth) {
				final AspectChangeIO acio = new AspectChangeIO(this, inputWidth * type.getTotalBits());
				final DFEVectorType<DFEVar> arrayType = new DFEVectorType<DFEVar>(type, outputWidth);
				final DFEVar resetToRemovePadding = control.count.simpleCounter(32, enableFrequency * length) === 0;
				final DFEVector<DFEVar> input = acio.input("input", arrayType, enable, resetToRemovePadding);
				io.output("output", input, input.getType());
			} else {
				final AspectChangeIO acio = new AspectChangeIO(this, outputWidth * type.getTotalBits());
				final DFEVectorType<DFEVar> arrayType = new DFEVectorType<DFEVar>(type, inputWidth);
				final DFEVector<DFEVar> input = io.input("input", arrayType, enable);

				CounterChain chain = control.count.makeCounterChain();
				DFEVar iteration = chain.addCounter(2, 1);
				DFEVar cycle = chain.addCounter(enableFrequency * length, 1);
				DFEVar paddingCycle = iteration === 0 ? enableFrequency * length - 1 : enableFrequency * length - enableFrequency;

				//Note that the reset may happen on a cycle where it is not enabled. The behaviour is to reset anyway, but really people shouldn't do this.
				final DFEVar resetToAddPadding = cycle === paddingCycle;
				acio.output("output", input, enable, resetToAddPadding);
			}
		}
	}

	@Test public void testNoMultipleInput()             { testACIO( 5, 3,  0, 2); }
	@Test public void testWithMultipleInput()           { testACIO(10, 4,  0, 2); }
	@Test public void testExactMultipleInput()          { testACIO( 6, 2,  0, 2); }

	@Test public void testPassThrough()                 { testACIO( 2, 2,  0, 2); }

	@Test public void testNoMultipleOutput()            { testACIO( 3, 4,  0, 2); }
	@Test public void testWithMultipleOutput()          { testACIO( 2, 9,  0, 2); }
	@Test public void testExactMultipleOutput()         { testACIO( 1, 4,  0, 2); }

	@Test public void testNoMultipleInputPadding()      { testACIO( 5, 3,  1,  2); }
	@Test public void testWithMultipleInputPadding()    { testACIO(10, 4,  1,  2); }
	@Test public void testExactMultipleInputPadding()   { testACIO( 6, 2,  1,  2); }

	@Test public void testNoMultipleOutputPadding()     { testACIO( 3, 4,  1,  2); }
	@Test public void testWithMultipleOutputPadding()   { testACIO( 2, 9,  1,  2); }
	@Test public void testExactMultipleOutputPadding()  { testACIO( 1, 4,  1,  2); }

	@Test public void testNoMultipleOutputPaddingFa()   { testACIO( 6, 7,  1,  1); }
	@Test public void testNoMultipleOutputPaddingFb()   { testACIO( 6, 7, -1,  1); }
	@Test public void testWithMultipleOutputPaddingFa()  { testACIO( 2, 9,  1,  1); }
	@Test public void testWithMultipleOutputPaddingFb()  { testACIO( 2, 9, -1,  1); }
	@Test public void testExactMultipleOutputPaddingFa() { testACIO( 1, 4,  1,  1); }
	@Test public void testExactMultipleOutputPaddingFb() { testACIO( 1, 4, -1,  1); }

	private void testACIO(final int inputWidth, final int outputWidth, final int paddingMultiplier, int enableFrequency) {
		final DFEType type   = KernelLib.dfeUInt(32);
		TestData     data   = new TestData(inputWidth, outputWidth, paddingMultiplier, enableFrequency);

		SimulationManager m = new SimulationManager("AspectChangeIoTest", SimulationParams.BITACCURATE_MAX4);
		m.setKernel(new ACIOIoTestKernel(m.makeKernelParameters(), type, inputWidth, outputWidth, enableFrequency));
		m.setKernelCycles(data.getRunCycles() * enableFrequency);
		m.setInputDataRaw("input", data.encodeInput(type));
		if (paddingMultiplier != 0) {//force input/output to add or remove padding
			m.setScalarInput("length", data.getLength() / Math.min(inputWidth, outputWidth));
		} else {//occasionally force anyway on the cycle we would expect to be outputting, just to make sure that works
			m.setScalarInput("length", (ITERATIONS / 2) * data.getLength() / Math.min(inputWidth, outputWidth));
		}
		m.build();
		m.run();

		List<Double> output = data.decodeOutput(m.getOutputDataRaw("output"), type);
		List<Double> goldenOutput = data.getGoldenOuput();
		for (int i = 0; i < output.size(); i++) {
			assertEquals(goldenOutput[i].intValue(), output[i].intValue());
		}
	}

	private class MoreTestData {

		private final int wordWidth;
		private final int cycles;
		private final int portWidth;

		protected MoreTestData(int wordWidthIn, int cyclesIn, int portWidthIn) {

			wordWidth = wordWidthIn;
			cycles = cyclesIn;
			portWidth = portWidthIn;
		}

		protected List<Bits> encodeInput() {
			DFEType inputType = KernelLib.dfeUInt(wordWidth);
			Bits singleInput = inputType.encodeConstant(0);
			for (int i = 1; i < cycles; i++) {
				singleInput = inputType.encodeConstant(i).cat(singleInput);
			}
			int totalBits = wordWidth*cycles;
			int remainder = totalBits%portWidth;
			int paddingSize = portWidth - remainder;
			singleInput = Bits.allZeros(paddingSize).cat(singleInput);
			int finalBits = singleInput.getWidth();
			System.out.printf("Final Test Bits = %d\n", finalBits);
			List<Bits> output = new ArrayList<Bits>();
			int nInputs = finalBits/portWidth;
			for (int i = 0; i < nInputs; i++) {
				output.add(singleInput.getBitsRaw(i*portWidth,portWidth));
			}
			output.add(Bits.allZeros(portWidth));
			return output;
		}

		protected Integer[] decodeOutput(List<Bits> bits) {
			Integer[] output = new Integer[cycles];
			for (int i = 0; i < cycles; i++) {
				output[i] = KernelLib.dfeUInt(32).decodeConstant(bits[i]).intValue();
			}
			return output;
		}

		protected Integer[] getExpectedOutput() {
			Integer[] output = new Integer[cycles];
			for (int i = 0; i < cycles; i++) output[i] = i;
			return output;
		}
	}

	private class AnotherACIOTestKernel extends Kernel{
		protected AnotherACIOTestKernel(KernelParameters params, int wordWidth, int portWidth) {
			super(params);

			DFEVar cycles = io.scalarInput("cycles", dfeUInt(32));
			DFEVar counter = control.count.makeCounterChain().addCounter(cycles, 1);
			DFEVar doFlush = cycles === (counter-1);
			DFEType inputType = dfeUInt(wordWidth);
			DFEType outputType = dfeUInt(32);

			AspectChangeIO acio = new AspectChangeIO(this, portWidth);
			DFEVar input = acio.input("input", inputType, constant.var(true), doFlush);
			debug.simPrintf("Kernel Processing: %d\n",input);
			io.output("output", input.cast(outputType), outputType);

		}
	}

	private void anotherACIOTest(final int wordWidth, final int portWidth, final int cycles) {

		MoreTestData data = new MoreTestData(wordWidth, cycles, portWidth);

		SimulationManager m = new SimulationManager("ACIOTest");
		m.setKernel(new AnotherACIOTestKernel(m.makeKernelParameters(), wordWidth, portWidth));
		m.setKernelCycles(cycles);
		m.setInputDataRaw("input", data.encodeInput());
		m.setScalarInput("cycles",cycles);
		m.build();
		m.run();

		Integer[] output = data.decodeOutput(m.getOutputDataRaw("output"));
		Integer[] expectedOutput = data.getExpectedOutput();
		for (int i = 0; i < output.length; i++) {
			System.out.printf("Expected: %d, Got: %d\n", expectedOutput[i], output[i]);
		}
		for (int i = 0; i < output.length; i++) {
			assertEquals(expectedOutput[i], output[i]);
		}
	}


	@Test public void testNastyMultiple() { anotherACIOTest(30, 3072, 1000); }
	@Test public void testAnotherNastyMultiple() { anotherACIOTest(30, 42, 1000); }
	@Test public void exactProblem() { anotherACIOTest(192,256,3235); }
}
