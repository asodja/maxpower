package maxpower.kernel.merger.graphpasses;

import maxpower.kernel.merger.KMGraph;
import maxpower.kernel.merger.KMKernel;
import maxpower.kernel.merger.KMVar;
import maxpower.kernel.merger.TestHelper;
import maxpower.kernel.merger.nodes.KMNode;
import maxpower.kernel.merger.nodes.KMNodeAdd;
import maxpower.kernel.merger.nodes.KMNodeInput;
import maxpower.kernel.merger.nodes.KMNodeMul;

import org.junit.Assert;
import org.junit.Test;

public class CommonSubExpressionTest {

	@Test
	public void simpleTest() {
		/* We create a simple graph in order to test the functionality.
		 * We should probably add more tests later (especially after we encountered some problems)
		 *
		 *  In1 In2 In1 In2          In1 In2
		 *   \   /   \   /            \   /
		 *     +       +        ->      +
		 *      \     /                | |
		 *         *                    *
		 */

		KMGraph graph = createSimpleGraphInput();

		CommonSubExpressionGraphPass.run(graph);

		boolean result = checkSimpleTest(graph);

		Assert.assertTrue(result);
	}

	private static KMGraph createSimpleGraphInput() {
		KMGraph graph = new KMGraph();

		KMKernel kernel = new KMKernel() {};

		KMNodeInput in1 = new KMNodeInput(kernel, "in1");
		TestHelper.addNodeToKernelGraph(kernel, in1);
		KMNodeInput in2 = new KMNodeInput(kernel, "in2");
		TestHelper.addNodeToKernelGraph(kernel, in2);

		KMVar inVar1 = TestHelper.createNewKMVar(kernel);
		TestHelper.setSource(inVar1, in1);
		KMVar inVar2 = TestHelper.createNewKMVar(kernel);
		TestHelper.setSource(inVar2, in2);

		KMNodeAdd add1 = new KMNodeAdd(inVar1, inVar2);
		TestHelper.addNodeToKernelGraph(kernel, add1);
		KMNodeAdd add2 = new KMNodeAdd(inVar1, inVar2);
		TestHelper.addNodeToKernelGraph(kernel, add2);

		KMVar addVar1 = TestHelper.createNewKMVar(kernel);
		TestHelper.setSource(addVar1, add1);
		KMVar addVar2 = TestHelper.createNewKMVar(kernel);
		TestHelper.setSource(addVar2, add2);

		KMNodeMul mul = new KMNodeMul(addVar1, addVar2);
		TestHelper.addNodeToKernelGraph(kernel, mul);

		in1.addOutput(add1);
		in1.addOutput(add2);
		in2.addOutput(add1);
		in2.addOutput(add2);

		add1.addOutput(mul);
		add2.addOutput(mul);

		TestHelper.addKernelGraph(graph, TestHelper.getGraph(kernel), 0);

		return graph;
	}

	private static boolean checkSimpleTest(KMGraph graph) {
		boolean result = true;
		int inputCount = 0;
		int addCount = 0;
		int mulCount = 0;

		for (KMNode node : graph.getNodes()) {
			if (node instanceof KMNodeInput) {
				inputCount++;
				result &= node.getOutputs().size() == 1;
				KMNodeInput nodeIn = (KMNodeInput) node;
				result &= nodeIn.getName().equals("in1") || nodeIn.getName().equals("in2");
				if (result) {
					result &= node.getOutputs()[0] instanceof KMNodeAdd;
				}
			} else if (node instanceof KMNodeAdd) {
				addCount++;
				result &= node.getInputs().size() == 2;
				result &= node.getOutputs().size() == 2;
				if (result) {
					result &= node.getInputs()[0] instanceof KMNodeInput;
					result &= node.getInputs()[1] instanceof KMNodeInput;
					result &= node.getOutputs()[0] instanceof KMNodeMul;
					result &= node.getOutputs()[1] instanceof KMNodeMul;
				}
			} else if (node instanceof KMNodeMul) {
				mulCount++;
				result &= node.getInputs().size() == 2;
				if (result) {
					result &= node.getInputs()[0] instanceof KMNodeAdd;
					result &= node.getInputs()[1] instanceof KMNodeAdd;
				}
			} else {
				result = false;
			}
		}

		result &= inputCount == 2 && addCount == 1 && mulCount == 1;

		return result;
	}

}
