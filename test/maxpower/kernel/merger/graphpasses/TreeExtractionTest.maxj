package maxpower.kernel.merger.graphpasses;

import java.util.Random;

import junit.framework.Assert;
import maxpower.kernel.merger.KMGraph;
import maxpower.kernel.merger.KMKernel;
import maxpower.kernel.merger.KMVar;
import maxpower.kernel.merger.Merger;
import maxpower.kernel.merger.TestHelper;
import maxpower.kernel.merger.nodes.KMNode;
import maxpower.kernel.merger.nodes.KMNodeMul;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;

public class TreeExtractionTest {
	private final int RUNS = 1000;

	private class TreeExtractionTestKernel extends KMKernel {
		public TreeExtractionTestKernel(KernelLib owner) {
			KMVar a = io.input("a");
			KMVar b = io.input("b");
			KMVar c = io.input("c");
			KMVar d = io.input("d");

			io.output("result", a * b * c * d);
		}
	}

	private class TreeExtractionMergerTestKernel extends Kernel {
		private final KMGraph m_graph;

		@SuppressWarnings("unchecked")
		public TreeExtractionMergerTestKernel(KernelParameters parameters) {
			super(parameters);

			Merger merger = new Merger(this);
			merger.addInput("a", io.input("a", dfeFloat(8, 24)));
			merger.addInput("b", io.input("b", dfeFloat(8, 24)));
			merger.addInput("c", io.input("c", dfeFloat(8, 24)));
			merger.addInput("d", io.input("d", dfeFloat(8, 24)));
			merger.addKernel(new TreeExtractionTestKernel(this));
			merger.build();
			m_graph = TestHelper.getKMGraphOfMerger(merger);
			io.output("result", merger.getOutput("result").getType()) <== merger.getOutput("result");
		}
	}

	@Test
	public void treeExtractionTest() {
		SimulationManager manager = new SimulationManager("TreeExtractionTest");
		TreeExtractionMergerTestKernel kernel = new TreeExtractionMergerTestKernel(manager.makeKernelParameters());
		manager.setKernel(kernel);
		manager.build();

		final long seed = System.currentTimeMillis();
		Random rng = new Random(seed);
		manager.logInfo("Seed: %d", seed);

		double[] a = new double[RUNS];
		double[] b = new double[RUNS];
		double[] c = new double[RUNS];
		double[] d = new double[RUNS];
		for (int i = 0; i < RUNS; i++) {
			a[i] = rng.nextFloat();
			b[i] = rng.nextFloat();
			c[i] = rng.nextFloat();
			d[i] = rng.nextFloat();
		}

		manager.setInputData("a", a);
		manager.setInputData("b", b);
		manager.setInputData("c", c);
		manager.setInputData("d", d);
		manager.setKernelCycles(RUNS);
		manager.run();

		double[] result = manager.getOutputDataArray("result");

		for (int i = 0; i < RUNS; i++) {
			float expected = (float) (a[i] * b[i] * c[i] * d[i]);
			Assert.assertEquals(expected, result[i], expected * 0.00001);
		}

		KMGraph graph = kernel.m_graph;
		int countMul = 0;
		for (KMNode node : graph.getNodes()) {
			if (node instanceof KMNodeMul) {
				countMul++;
			}
		}

		Assert.assertEquals(1, countMul);
	}
}
