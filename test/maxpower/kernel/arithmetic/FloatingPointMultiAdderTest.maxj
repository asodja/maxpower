package maxpower.kernel.arithmetic;

import static com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory.dfeFloat;
import static org.junit.Assert.assertTrue;

import java.util.Random;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class FloatingPointMultiAdderTest {
	private static final int N = 100000; // length of test input data

	static class FPMATestKernel extends Kernel {
		protected FPMATestKernel(KernelParameters parameters, DFEFloat type, int numOperands, int numGuardBits) {
			super(parameters);

			DFEVectorType<DFEVar> arrayType = new DFEVectorType<DFEVar>(type, numOperands);
			DFEVector<DFEVar> input = io.input("input", arrayType);

			io.output("fpma_out", type) <== FloatingPointMultiAdder.add(numGuardBits, input.getElementsAsList());
		}
	}

	@Test public void testSingle()     { runTest(dfeFloat( 8, 24), 2); }
	@Test public void testFloat7_41()  { runTest(dfeFloat( 7, 41), 2); }
	@Test public void testFloat11_41() { runTest(dfeFloat(11, 41), 1); }
	@Test public void testDouble()     { runTest(dfeFloat(11, 53), 0); }

	private void runTest(DFEFloat type, int numGuardBits) {
		SimulationManager m = new SimulationManager("FloatingPointMultiAdderTest");
		long seed = System.currentTimeMillis();
		Random rng = new Random(seed);
		m.logMsg("Random seed: %d", seed);

		int numOperands = rng.nextInt(32) + 8;
		m.logMsg("Type = %s, numOperands = %d", type, numOperands);
		m.setKernel(new FPMATestKernel(m.makeKernelParameters(), type, numOperands, numGuardBits));

		Bits[]   input    = new Bits[N];
		double[] expected = new double[N];
		double[] maxAbs   = new double[N];

		DFEVectorType<DFEVar> arrayType = new DFEVectorType<DFEVar>(type, numOperands);

		for (int i = 0; i < N; ++i) {
			double[] operands = new double[numOperands];
			Bits[]   operBits = new Bits[numOperands];

			for (int j = 0; j < numOperands; ++j) {
				operBits[j] = type.encodeConstant(rng.nextGaussian() * i);
				// encode and decode, rather than using value directly, so simulation
				// and model have inputs at the same precision.
				operands[j] = type.decodeConstant(operBits[j]);
			}

			input[i] = arrayType.encodeConstant(operBits);

			expected[i] = 0;
			maxAbs[i]   = Double.MIN_NORMAL;
			for (int j = 0; j < numOperands; j++) {
				expected[i] += operands[j];
				maxAbs[i]    = Math.max(maxAbs[i], Math.abs(operands[j]));
			}
		}

		m.setInputDataRaw("input", input);
		m.setKernelCycles(N);
		m.runTest();

		double[] actual = m.getOutputDataArray("fpma_out");

		for (int i = 0; i < N; i++) {
			// TODO do we need to account for numGuardBits?
			double errorThreshold = 4 /* fudge factor */
			                      * Math.scalb(Math.sqrt(numOperands), 1 /* implicit '1' */ - type.getMantissaBits());
			myAssertEquals(i, expected[i] , actual[i], maxAbs[i], errorThreshold);
		}
	}

	private static void myAssertEquals(int idx, double expected, double actual, double maxAbs, double errorThreshold) {
		double absDiff = Math.abs(expected - actual);
		double relDiff = absDiff / Math.max(maxAbs, expected);

		String msgOnError =
			String.format("idx = %d, expected = %g, actual = %g, absDiff = %g, relDiff = %g, errorThreshold = %g, maxAbs = %g",
					idx, expected, actual , absDiff, relDiff, errorThreshold, maxAbs);
		assertTrue(msgOnError, relDiff <= errorThreshold);
	}
}
