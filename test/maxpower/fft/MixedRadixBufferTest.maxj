package maxpower.fft;

import static org.junit.Assert.assertArrayEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class MixedRadixBufferTest {

	final static int NUM_PIPES = 4;

	final static int NUM_DATA_RUNS = 4;

	private static class MixedRadixBufferTestKernel extends Kernel{

		DFEType dataType = dfeFloat(8, 24);
		DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(dataType, NUM_PIPES);

		public MixedRadixBufferTestKernel(KernelParameters parameters, final int fftSize) {
			super(parameters);

			DFEVector<DFEVar> inputVector = io.input("input", vectorType);

			DFEComplexType complexType = new DFEComplexType(dataType);
			DFEVectorType<DFEComplex> complexVectorType = new DFEVectorType<DFEComplex>(complexType, NUM_PIPES);

			DFEVector<DFEComplex> data = complexVectorType.newInstance(this);
			for (int i = 0; i < NUM_PIPES; i++) {
				data[i] <== DFEComplexType.newInstance(this, inputVector[i], inputVector[i]);
			}

			List<DFEVector<DFEComplex>> list = new ArrayList<DFEVector<DFEComplex>>();
			DFEVectorType<DFEComplex> fftType = new DFEVectorType<DFEComplex>(complexType, 1);

			int bitsPerPipe = fftType.getTotalBits();
			for(int i = 0; i < NUM_PIPES; i++){
				list.add(fftType.unpack(data.pack().slice(i*bitsPerPipe, bitsPerPipe)));
			}

			List<DFEVector<DFEComplex>> transposedData = FftBuffer.applyMixedRadixBuffer(list, fftSize);

			DFEVector<DFEComplex> result = complexVectorType.newInstance(this);

			for (int i = 0; i < 4; i++) {
				result.connect(i, transposedData[i][0]);
			}

			DFEVector<DFEVar> realResult = vectorType.newInstance(this);
			for (int i = 0; i < NUM_PIPES; i++) {
				realResult[i] <== result[i].getReal();
				result[i].getImaginary().setReportOnUnused(false);
			}

			io.output("output", vectorType) <== realResult;
		}
	}

	@Test public void testMixedRadixBuffer32()    { testMixedRadixBuffer(32   ); }
	@Test public void testMixedRadixBuffer64()    { testMixedRadixBuffer(64   ); }
	@Test public void testMixedRadixBuffer128()   { testMixedRadixBuffer(128  ); }
	@Test public void testMixedRadixBuffer256()   { testMixedRadixBuffer(256  ); }
	@Test public void testMixedRadixBuffer512()   { testMixedRadixBuffer(512  ); }
	@Test public void testMixedRadixBuffer1024()  { testMixedRadixBuffer(1024 ); }
	@Test public void testMixedRadixBuffer2048()  { testMixedRadixBuffer(2048 ); }
	@Test public void testMixedRadixBuffer4096()  { testMixedRadixBuffer(4096 ); }
	@Test public void testMixedRadixBuffer8192()  { testMixedRadixBuffer(8192 ); }
	@Test public void testMixedRadixBuffer16384() { testMixedRadixBuffer(16384); }

	private void testMixedRadixBuffer(final int size) {
		double input[][]    = new double[NUM_DATA_RUNS * size / NUM_PIPES][NUM_PIPES];
		double actual[][]   = new double[NUM_DATA_RUNS * size / NUM_PIPES][NUM_PIPES];
		Bits inputBits[]    = new Bits[NUM_DATA_RUNS * size / NUM_PIPES];

		SimulationManager manager = new SimulationManager("MixedRadixBufferTest" + size);
		MixedRadixBufferTestKernel kernel = new MixedRadixBufferTestKernel(manager.makeKernelParameters(), size);
		manager.setKernel(kernel);
		manager.build();

		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < size / NUM_PIPES; j++) {
				for (int k = 0; k < NUM_PIPES; k++) {
					input[j + i * size / NUM_PIPES][k] = i * size + j * NUM_PIPES + k;
				}
				inputBits[j + i * size / NUM_PIPES] =
					kernel.vectorType.encodeConstant(input[j + i * size / NUM_PIPES]);
			}
		}

		manager.setKernelCycles(NUM_DATA_RUNS * size / NUM_PIPES);
		manager.setInputDataRaw("input", inputBits);
		manager.run();

		Bits[] actualBits = manager.getOutputDataRawArray("output");
		for (int i = 0; i < NUM_DATA_RUNS; i++ ) {
			for (int j = 0; j < size / NUM_PIPES; j++) {
				@SuppressWarnings("rawtypes")
				List word = kernel.vectorType.decodeConstant(actualBits[j]);
				for (int k = 0; k < NUM_PIPES; k++) {
					actual[j + i * size / NUM_PIPES][k] = (Double) word[k];
				}
			}
		}

		double[][] expected = createExpectedData(size, input);
		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < size / NUM_PIPES; j++) {
				assertArrayEquals("MixedRadixBuffer" + j, expected[j], actual[j + i * size / NUM_PIPES], 0);
			}
		}
	}

	private double[][] createExpectedData(final int size, double[][] input) {
		double expected[][] = new double[NUM_DATA_RUNS * size / NUM_PIPES][NUM_PIPES];

		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			int positionLow = 0;
			int positionHigh = size / 2;
			for (int j = 0; j < size; j++) {
				int address;
				if (j % 2 == 0) {
					address = positionLow++;
				} else {
					address = positionHigh++;
				}
				if (j % NUM_PIPES == 3){
					positionLow  += 2;
					positionHigh += 2;
					if (positionLow == size / 2){
						positionLow  = 2;
						positionHigh = size / 2 + 2;
					}
				}
				expected[i * size / NUM_PIPES + j / NUM_PIPES][j % NUM_PIPES] =
					input[i * size / NUM_PIPES + address / NUM_PIPES][address % NUM_PIPES];
			}
		}

		return expected;
	}
}
