package maxpower.fft;

import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import maxpower.fft.utils.Complex;
import maxpower.fft.utils.FFTWrapper;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class FftTest {

	public final static int NUM_ITERATIONS  = 11;   // Minimum of 11 iterations needed to cover complete addressing pattern

	// Bound the acceptable error
	public final static double MIN_SNR_DB = 69.0;

	private static class FftTestKernel extends Kernel {

		private static int NUM_FFT_PIPES;
		private static DFEType twiddleType;
		private static DFEType internalSampleType;

		public static DFEVectorType<DFEVar> ioInVectorType;
		public static DFEVectorType<DFEComplex> resultArray;

		FftTestKernel(KernelParameters parameters, int fftSize, boolean useFloat) {
			super(parameters);

			NUM_FFT_PIPES = FourierTransform.NUM_FFT_PIPES;
			resultArray = new DFEVectorType<DFEComplex>(new DFEComplexType(dfeFloat(8, 24)),
					NUM_FFT_PIPES);

			if (useFloat == true) {
				twiddleType        = dfeFloat(8, 24);
				internalSampleType = dfeFloat(8, 24);
			} else {
				twiddleType	       = dfeFixOffset(18, 1.0, SignMode.TWOSCOMPLEMENT);
				internalSampleType = dfeFixOffset(24, 1.0, SignMode.TWOSCOMPLEMENT);
			}

			ioInVectorType = new DFEVectorType<DFEVar>(dfeFloat(8, 24), NUM_FFT_PIPES);

			/* Input */
			final DFEVector<DFEVar> in0 = io.input("pairsIn0", ioInVectorType);
			final DFEVector<DFEVar> in1 = io.input("pairsIn1", ioInVectorType);

			final List<DFEVector<DFEComplex>> dataIn = untangleInput(in0, in1);

			/* Do the FFT */
			final List<DFEVector<DFEComplex>> fftOut = FourierTransform.transform(fftSize, twiddleType, false,
					false, dataIn);

			/* Output */
			final DFEVector<DFEComplex> out = untangleOutput(fftOut);
			io.output("pairsOut", out, new DFEVectorType<DFEComplex>(new DFEComplexType(dfeFloat(8, 24)),
					NUM_FFT_PIPES));
		}

		// Cast data to internal type
		private List<DFEVector<DFEComplex>> untangleInput(DFEVector<DFEVar> in0, DFEVector<DFEVar> in1) {
			final List<DFEVector<DFEComplex>> output = new ArrayList<DFEVector<DFEComplex>>(NUM_FFT_PIPES);

			for (int i = 0; i < NUM_FFT_PIPES; i++) {
				DFEVectorType<DFEComplex> mpType = new DFEVectorType<DFEComplex>(
						new DFEComplexType(internalSampleType), 1);
				DFEVector<DFEComplex> inMP = mpType.newInstance(this);
				DFEComplex input = DFEComplexType.newInstance(this, in0[i], in1[i]);
				DFEComplex castInput = input.cast(new DFEComplexType(internalSampleType));
				inMP[0] <== castInput;
				output.add(inMP);
			}
			return output;
		}

		// Cast to output type
		private DFEVector<DFEComplex> untangleOutput(List<DFEVector<DFEComplex>> fftOut) {
			DFEVectorType<DFEComplex> outArrayType =
				new DFEVectorType<DFEComplex>(new DFEComplexType(dfeFloat(8, 24)), NUM_FFT_PIPES);
			final DFEVector<DFEComplex> output = outArrayType.newInstance(this);
			for (int i = 0; i < NUM_FFT_PIPES; i++) {
				for (int j = 0; j < fftOut[i].getSize(); j++) {
					output[i + j * NUM_FFT_PIPES] <==
						fftOut[i][j].cast(new DFEComplexType(dfeFloat(8, 24)));
				}
			}
			return output;
		}
	}

	@Test public void testFft16()         { testFft(16,    false); }
	@Test public void testFft32()         { testFft(32,    false); }
	@Test public void testFft64()         { testFft(64,    false); }
	@Test public void testFft128()        { testFft(128,   false); }
	@Test public void testFft256()        { testFft(256,   false); }
	@Test public void testFft512()        { testFft(512,   false); }
	@Test public void testFft1024()       { testFft(1024,  false); }
	@Test public void testFft2048()       { testFft(2048,  false); }
	@Test public void testFft4096()       { testFft(4096,  false); }
	@Test public void testFft8192()       { testFft(8192,  false); }
	@Test public void testFft16384()      { testFft(16384, false); }
	@Test public void testFft16float()    { testFft(16,    true);  }
	@Test public void testFft32float()    { testFft(32,    true);  }
	@Test public void testFft64float()    { testFft(64,    true);  }
	@Test public void testFft128float()   { testFft(128,   true);  }
	@Test public void testFft256float()   { testFft(256,   true);  }
	@Test public void testFft512float()   { testFft(512,   true);  }
	@Test public void testFft1024float()  { testFft(1024,  true);  }
	@Test public void testFft2048float()  { testFft(2048,  true);  }
	@Test public void testFft4096float()  { testFft(4096,  true);  }
	@Test public void testFft8192float()  { testFft(8192,  true);  }
	@Test public void testFft16384float() { testFft(16384, true);  }

	public void testFft(int fftSize, boolean useFloat) {
		long seed = System.currentTimeMillis();
		Random rn = new Random(seed);


		Complex[][] pairs       = generateInputData(rn, fftSize);
		Complex[][] expected    = calculateExpected(pairs, fftSize);

		SimulationManager manager = new SimulationManager("FftTest");
		manager.setKernel(new FftTestKernel(manager.makeKernelParameters(), fftSize, useFloat));
		manager.logMsg("Using random seed: %d", seed);

		List<List<Bits>> bitsIn = convertInputToRaw(pairs, fftSize);

		final int numKernelCycles = NUM_ITERATIONS * (fftSize / FourierTransform.NUM_FFT_PIPES);
		manager.setInputDataRaw("pairsIn0", bitsIn[0]);
		manager.setInputDataRaw("pairsIn1", bitsIn[1]);
		manager.setKernelCycles(numKernelCycles);
		manager.runTest();

		List<Bits> bitsOut = manager.getOutputDataRaw("pairsOut");

		Complex[][] results = convertRawToOutput(bitsOut, fftSize);

		double snr_db = calculateSnr(expected, results);

		if (snr_db < MIN_SNR_DB) {
			for (int i = 0; i < expected.length; i++) {
				for (int j = 0; j < expected[i].length; j++) {
					System.out.println("expected["+i+"]["+j+"] = " + expected[i][j].toString());
					System.out.println("results ["+i+"]["+j+"] = " + results[i][j].toString());
				}
			}
		}
		assertTrue("SNR = " + snr_db + "dB", snr_db > MIN_SNR_DB);
	}

	/**
	 * Convert input arrays to raw bits, ready for kernel input streams.
	 */
	private List<List<Bits>> convertInputToRaw(final Complex[][] pairs, final int fftSize) {

		final List<Bits> bits0 = new ArrayList<Bits>();
		final List<Bits> bits1 = new ArrayList<Bits>();

		/*
		 * Data is striped thus (for e.g. NUM_FFTS=2)
		 *
		 *   x0[0]   x0[1]   x0[2]   x0[3]   | x1[0]   x1[0]   x1[2]   x1[3]
		 *   x0[4]   x0[5]   x0[6]   x0[7]   | x1[4]   x1[5]   x1[6]   x1[7]
		 *     .       .       .       .     |   .       .       .       .
		 *   x0[N-4] x0[N-3] x0[N-2] x0[N-1] | x1[N-4] x1[N-3] x1[N-2] x1[N-1]
		 *   --------------------------------+--------------------------------
		 *   x2[0]   x2[1]   x2[2]   x2[3]   | x3[0]   x3[1]   x3[2]   x3[3]
		 *     .       .       .       .         .       .       .       .
		 */
		for (int i = 0; i < NUM_ITERATIONS; i++) {
			for (int j = 0; j < fftSize / FourierTransform.NUM_FFT_PIPES; j++) {
				final ArrayList<Double> v0 = new ArrayList<Double>();
				final ArrayList<Double> v1 = new ArrayList<Double>();
				for (int k = 0; k < FourierTransform.NUM_FFT_PIPES; k++) {
					v0.add(pairs[i][j * FourierTransform.NUM_FFT_PIPES + k].real());
					v1.add(pairs[i][j * FourierTransform.NUM_FFT_PIPES + k].imag());
				}

				bits0.add(FftTestKernel.ioInVectorType.encodeConstant(v0));
				bits1.add(FftTestKernel.ioInVectorType.encodeConstant(v1));
			}
		}

		final List<List<Bits>> bits = new ArrayList<List<Bits>>(2);
		bits.add(bits0);
		bits.add(bits1);

		return bits;
	}


	/**
	 * Convert raw bits from kernel output streams back to standard arrays.
	 *
	 * This is largely the inverse of the process described for
	 * convertRawToInput.  The results are digit-reversed, but we don't
	 * deal with that here.
	 */
	private Complex[][] convertRawToOutput(List<Bits> bits, final int fftSize) {

		Complex[][] results = new Complex[NUM_ITERATIONS][fftSize];

		for (int i = 0; i < NUM_ITERATIONS; i++) {
			for (int j = 0; j < fftSize / FourierTransform.NUM_FFT_PIPES; j++) {

				@SuppressWarnings("rawtypes")
				List word = FftTestKernel.resultArray.decodeConstant(
						bits[i * fftSize / FourierTransform.NUM_FFT_PIPES + j]);

				for (int k = 0; k < FourierTransform.NUM_FFT_PIPES; k++) {
					DFEComplexType.ConstantValue z0 =
						(DFEComplexType.ConstantValue) word[k];

					results[i][j * FourierTransform.NUM_FFT_PIPES + k] =
						new Complex(z0.getReal(), z0.getImaginary());
				}
			}
		}

		return results;
	}

	/**
	 * Generate random input data.
	 */
	private Complex[][] generateInputData(Random rn, int fftSize) {

		Complex[][] pairs = new Complex[NUM_ITERATIONS][fftSize];

		for (int i = 0; i < NUM_ITERATIONS; i++) {
			for (int j = 0; j < fftSize; j++) {
				pairs[i][j] = new Complex(
						(rn.nextDouble() - 0.5) / 1024,
						(rn.nextDouble() - 0.5) / 1024);
			}
		}

		return pairs;
	}

	/**
	 * Calculate expected output for a given input set.
	 *
	 * This is done in double-precision maths, and can be considered "perfect".
	 */
	private Complex[][] calculateExpected(Complex[][] pairs, int fftSize) {

		Complex[][] expected = new Complex[NUM_ITERATIONS][fftSize];
		for (int i = 0; i < NUM_ITERATIONS; i++) {

			List<Complex> a = new ArrayList<Complex>();

			/* Padding */
			for (int j = 0; j < fftSize; j++) {
				a.add(pairs[i][j]);
			}

			/* DFT of 2 traces */
			List<Complex> A = FFTWrapper.fft(a);

			/* Digit-reversed indexing */
			for (int j = 0; j < fftSize; j++) {
				expected[i][j] = A[digitReverse(j, fftSize)];
			}
		}

		return expected;
	}

	/**
	 * Calculate signal-to-noise ratio (SNR) between a reference output, and
	 * the actual output.
	 */
	private static double calculateSnr(Complex[][] ref, Complex[][] out) {
		double S = 0.0;
		double N = 0.0;

		for (int i = 0; i < ref.length; i++) {
			for (int j = 0; j < ref[i].length; j++) {

				Complex res = ref[i][j];
				Complex exp = out[i][j];

				Complex err = exp.sub(res);

				S += (exp.real() * exp.real()) + (exp.imag() * exp.imag());
				N += (err.real() * err.real()) + (err.imag() * err.imag());
			}
		}

		return 10 * Math.log10(S / N);
	}

	/**
	 * Maps x according to the "digit-reversed" indexing that the FFT will
	 * induce.
	 *
	 * Formally, if x can be expressed as:
	 *
	 *   x = x0 + n0*(x1 + n1*(x2 + ... n{N-2}*x{N-1}))
	 *
	 * then x is mapped to y, such that:
	 *
	 *   y = x{N-1} + n{N-1}*(x{N-2} + n{N-2}*(x{N-3} + ... n1*x0))
	 *
	 * In our particular case, n0=5, and n1=n2=...=n9=2.
	 */
	protected static int digitReverse(int x, int fftSize) {
		if (fftSize % 5 == 0) {
			int N = fftSize / 5;

			int a = x / N;
			int b = x % N;

			return a + bitReverse(b, N) * 5;
		} else {
			return bitReverse(x, fftSize);
		}
	}

	/**
	 * Special case of digit reversal where all radixes are 2.
	 *
	 * Simply bit-reversal.
	 */
	private static int bitReverse(int x, int N) {
		int y = 0;
		for (int i = 0; i < Math.round(Math.log10(N) / Math.log10(2)); i++) {
			y <<= 1;
			y |= (x & 1);
			x >>= 1;
		}
		return y;
	}
}
