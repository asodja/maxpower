package maxpower.fft;

import static org.junit.Assert.assertArrayEquals;

import java.util.Random;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;

public class Test3DTranspose {

	final static int NUM_RUNS = 5;

	final static int NUM_DATA_RUNS = 10;

	private static class Test3DTransposeKernel extends Kernel{

		public Test3DTransposeKernel(KernelParameters parameters, final int width, final int height,
				final int depth) {
			super(parameters);

			DFEVar input = io.input("input", dfeFloat(8, 24));

			io.output("output", dfeFloat(8, 24)) <== FftBuffer.transpose(input, width, height, depth);
		}
	}

	@Test
	public void Test3DTransposeWrapper() {
		long seed = System.currentTimeMillis();
		Random rng = new Random(seed);
		for (int i = 0; i < NUM_RUNS; i++) {
			final int width  = Math.abs(rng.nextInt()) % 32 + 2;
			final int height = Math.abs(rng.nextInt()) % 32 + 2;
			test3DTranspose(width, height, width, seed);
		}
	}

	private void test3DTranspose(final int width, final int height, int depth, final long seed) {
		double input[]    = new double[NUM_DATA_RUNS * height * width *  depth];
		double actual[]   = new double[NUM_DATA_RUNS * height * width *  depth];
		double expected[] = new double[NUM_DATA_RUNS * height * width *  depth];

		int pos = 0;
		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < depth; j++) {
				for (int k = 0; k < height; k++) {
					for (int l = 0; l < width; l++) {
						input[pos++] = l + k * width + j * width * height;
					}
				}
			}
		}
		pos = 0;
		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < width; j++) {
				for (int k = 0; k < height; k++) {
					for (int l = 0; l < depth; l++) {
						expected[pos++] = j + k * width + l * width * height;
					}
				}
			}
		}

		SimulationManager manager = new SimulationManager("Transposer3DTest");
		Test3DTransposeKernel kernel = new Test3DTransposeKernel(manager.makeKernelParameters(), width, height, depth);
		manager.setKernel(kernel);
		manager.logMsg("Seed: %d, Width: %d, Height: %d, Depth %d", seed, width, height, depth);
		manager.build();

		manager.setKernelCycles(NUM_DATA_RUNS * height * width * depth);
		manager.setInputData("input", input);
		manager.run();

		actual = manager.getOutputDataArray("output");

		assertArrayEquals("Transposer", expected, actual, 0);
	}
}
