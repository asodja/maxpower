package maxpower.fft;

import static org.junit.Assert.assertArrayEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class BitReverseTest {

	final static int NUM_PIPES = 4;

	final static int NUM_DATA_RUNS = 4;

	private static class BitReverseTestKernel extends Kernel {

		DFEType dataType = dfeFloat(8, 24);
		DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(dataType, NUM_PIPES);

		BitReverseTestKernel(KernelParameters parameters, int fftSize) {
			super(parameters);

			stream.suppressOffsetVectorWarnings();

			DFEVector<DFEVar> inputVector = io.input("input", vectorType);

			DFEComplexType complexType = new DFEComplexType(dataType);
			DFEVectorType<DFEComplex> complexVectorType = new DFEVectorType<DFEComplex>(complexType, NUM_PIPES);

			DFEVector<DFEComplex> data = complexVectorType.newInstance(this);
			for (int i = 0; i < NUM_PIPES; i++) {
				data[i] <== DFEComplexType.newInstance(this, inputVector[i], inputVector[i]);
			}

			List<DFEVector<DFEComplex>> list = new ArrayList<DFEVector<DFEComplex>>();
			DFEVectorType<DFEComplex> fftType = new DFEVectorType<DFEComplex>(complexType, 1);

			int bitsPerPipe = fftType.getTotalBits();
			for(int i = 0; i < NUM_PIPES; i++){
				list.add(fftType.unpack(data.pack().slice(i*bitsPerPipe, bitsPerPipe)));
			}

			List<DFEVector<DFEComplex>> transposedData = FftBuffer.applyBitReverseBuffer(list, fftSize);

			DFEVector<DFEComplex> result = complexVectorType.newInstance(this);

			for (int i = 0; i < 4; i++) {
				result.connect(i, transposedData[i][0]);
			}

			DFEVector<DFEVar> realResult = vectorType.newInstance(this);
			for (int i = 0; i < NUM_PIPES; i++) {
				realResult[i] <== result[i].getReal();
				result[i].getImaginary().setReportOnUnused(false);
			}

			io.output("output", vectorType) <== realResult;
		}
	}

	@Test public void testBitReverse32()    { testBitReverse(32   ); }
	@Test public void testBitReverse64()    { testBitReverse(64   ); }
	@Test public void testBitReverse128()   { testBitReverse(128  ); }
	@Test public void testBitReverse256()   { testBitReverse(256  ); }
	@Test public void testBitReverse512()   { testBitReverse(512  ); }
	@Test public void testBitReverse1024()  { testBitReverse(1024 ); }
	@Test public void testBitReverse2048()  { testBitReverse(2048 ); }
	@Test public void testBitReverse4096()  { testBitReverse(4096 ); }
	@Test public void testBitReverse8192()  { testBitReverse(8192 ); }
	@Test public void testBitReverse16384() { testBitReverse(16384); }

	private void testBitReverse(final int size) {
		double input[][]    = new double[NUM_DATA_RUNS * size / NUM_PIPES][NUM_PIPES];
		double actual[][]   = new double[NUM_DATA_RUNS * size / NUM_PIPES][NUM_PIPES];
		Bits inputBits[]    = new Bits[NUM_DATA_RUNS * size / NUM_PIPES];

		SimulationManager manager = new SimulationManager("BitReverseTest");
		BitReverseTestKernel kernel = new BitReverseTestKernel(manager.makeKernelParameters(), size);
		manager.setKernel(kernel);
		manager.build();

		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < size / NUM_PIPES; j++) {
				for (int k = 0; k < NUM_PIPES; k++) {
					input[j + i * size / NUM_PIPES][k] = i * size + j * NUM_PIPES + k;
				}
				inputBits[j + i * size / NUM_PIPES] =
					kernel.vectorType.encodeConstant(input[j + i * size / NUM_PIPES]);
			}
		}

		manager.setKernelCycles(NUM_DATA_RUNS * size / NUM_PIPES);
		manager.setInputDataRaw("input", inputBits);
		manager.run();

		Bits[] actualBits = manager.getOutputDataRawArray("output");
		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < size / NUM_PIPES; j++) {
				@SuppressWarnings("rawtypes")
				List word = kernel.vectorType.decodeConstant(actualBits[j + i * size / NUM_PIPES]);
				for (int k = 0; k < NUM_PIPES; k++) {
					actual[j + i * size / NUM_PIPES][k] = (Double) word[k];
				}
			}
		}

		double[][] expected = bitReverseData(size, input);
		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < size / NUM_PIPES; j++) {
				for (int k = 0; k < NUM_PIPES; k++) {
					System.out.println("Buff: " + k + " Exp: " + expected[j  + i * size / NUM_PIPES][k] + " Is : " +
							actual[j + i * size / NUM_PIPES][k]);
				}
			}
		}
		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < size / NUM_PIPES; j++) {
				assertArrayEquals("BitReverse " + j, expected[j  + i * size / NUM_PIPES],
						actual[j + i * size / NUM_PIPES], 0);
			}
		}
	}

	private double[][] bitReverseData(final int size, double[][] input) {
		double expected[][] = new double[NUM_DATA_RUNS * size / NUM_PIPES][NUM_PIPES];

		for (int i = 0; i < NUM_DATA_RUNS; i++) {
			for (int j = 0; j < size; j++) {
				int address = bitreverse(j, size);
				expected[j / NUM_PIPES + i * size / NUM_PIPES][j % NUM_PIPES] =
					input[address / NUM_PIPES + i * size / NUM_PIPES][address % NUM_PIPES];
			}
		}

		return expected;
	}

	private int bitreverse(int x, final int size) {
		int logN = (int) (Math.log(size) / Math.log(2));
		int xr = 0;
		for (int i = 0; i < logN; i++) {
			xr <<= 1;
			xr |= x & 1;
			x >>= 1;
		}
		return xr;
	}
}
