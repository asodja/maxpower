package maxpower.fft.utils;

import java.util.ArrayList;
import java.util.List;

import org.jtransforms.fft.DoubleFFT_1D;

public final class FFTWrapper {

	public static List<Complex> fft(List<Complex> in) {
		final int N = in.size();
		double[] x = reorderInput(N, in);

		new DoubleFFT_1D(N).complexForward(x);

		return generateOutput(N, x);
	}

	public static List<Complex> ifft(List<Complex> in) {
		final int N = in.size();
		double[] x = reorderInput(N, in);

		new DoubleFFT_1D(N).complexInverse(x, true);

		return generateOutput(N, x);
	}

	public static double[] reorderInput(int N, List<Complex> in) {
		double[] result = new double[N*2];

		for (int i = 0; i < N; i++) {
			result[2*i+0] = in[i].real();
			result[2*i+1] = in[i].imag();
		}

		return result;
	}

	public static List<Complex> generateOutput(int N, double[] x) {
		List<Complex> out = new ArrayList<Complex>();

		for (int i = 0; i < N; i++) {
			out.add(new Complex(x[2*i+0], x[2*i+1]));
		}

		return out;
	}
}
