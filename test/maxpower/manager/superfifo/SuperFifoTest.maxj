package maxpower.manager.superfifo;

import maxpower.manager.superfifo.SuperFifo.FifoIO;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.managers.DFEModel;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Flushing;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemChannelGranularity;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxeleros.ip.SlicePad.Padder;
import com.maxeler.maxeleros.managerblocks.StructUtils;
import com.maxeler.maxeleros.managercompiler.configuration.ManagerDRAMConfiguration.LMemConfig;

class SuperFifoTest extends CustomManager {

	public static class SuperFifoParameters extends EngineParameters {

		protected SuperFifoParameters(String[] args) {
			super(args);
		}

		@Override
		protected void declarations() {
			declareParam(s_parameterMaxFileName, DataType.STRING, "SuperFifoTest");
			declareParam(s_parameterDFE, DataType.DFEMODEL, DFEModel.ISCA);
			declareParam(s_parameterTarget, Target.class, Target.DFE_SIM);
			declareParam("hasStreamStatus", DataType.BOOL, true);
			declareParam("tag", DataType.STRING, "");
			declareParam("ddrFrequency", DataType.INT, 400);
		}

		public boolean isSimulation() {
			return getTarget() == com.maxeler.maxcompiler.v2.build.EngineParameters.Target.DFE_SIM;
		}

		public boolean hasStreamStatus() {
			return getParam("hasStreamStatus");
		}

		public String getTag() {
			return getParam("tag");
		}

		public int getDdrFrequency() {
			return getParam("ddrFrequency");
		}

		@Override
		public String getBuildName() {
			return getMaxFileName()
					+ (hasStreamStatus() ? "_SS" : "")
					+ (getTag().length() > 0 ? "_" + getTag() : "")
					+ "_" + getDFEModel().toString()
					+ "_" + getTarget().toString();
		}
	}


	private static class DataGen extends Kernel {
		public static ConfigWordType configWordType = new ConfigWordType();
		public static class ConfigWordType extends DFEStructType {
			public ConfigWordType() {
				super(
					sft("base", dfeUInt(64)),
					sft("wordCount", dfeUInt(64))
				);
			}
		}

		protected DataGen(KernelParameters parameters, int wordWidthBits) {
			super(parameters);
			flush.disabled();


			NonBlockingInput<DFEStruct> configWordInput = io.nonBlockingInput("configWord", configWordType,
				constant.var(true),
				1, DelimiterMode.FRAME_LENGTH,
				Flushing.interFrameGapNone, NonBlockingMode.NO_TRICKLING);

			StructUtils.printDFEStructType(configWordType);

			DFEStruct configWord = configWordInput.data;
			DFEVar configWordValid = configWordInput.valid;

			DFEVar seenValid = Reductions.streamHold(constant.var(true), configWordValid);

			DFEVar configBase = Reductions.streamHold((DFEVar)configWord["base"], configWordValid);
			DFEVar configWordCount = Reductions.streamHold((DFEVar)configWord["wordCount"], configWordValid);

			DFEVar count = control.count.makeCounter(
				control.count.makeParams(64)
					.withReset(configWordValid)
					.withInitValue(0)
					.withMax(configWordCount)
					.withWrapMode(WrapMode.STOP_AT_MAX)
				).getCount();


			DFEVar dataOut = (count + configBase).cast(dfeUInt(wordWidthBits));
			DFEVar outNow = seenValid & (count < configWordCount);

			debug.simPrintf(outNow, "Pushing word %d / %d\n", count + 1, configWordCount);

			io.output("dataOut", dfeUInt(wordWidthBits), outNow) <== dataOut;
		}

	}

	private SuperFifoTest(final SuperFifoParameters params) {
		super(params);

		LMemConfig mcc = makeLMemConfig()
			.setEnableParityMode(true)
			.setEnableECCMode(true)
			.setChannelGranularity(LMemChannelGranularity.getGranularity(8));

		LMemInterface iface = addLMemInterface(mcc);

		config.setDefaultStreamClockFrequency(157);
		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(params.hasStreamStatus()));

		final int fifoWidth = 192;

		FifoIO io = SuperFifo.create(this, iface, "superFifo", DFETypeFactory.dfeUInt(fifoWidth), 1024*1024*1024L);

		KernelBlock dataGen = addKernel(new DataGen(makeKernelParameters("dataGenKernel"), fifoWidth));

		dataGen.getInput("configWord") <== addStreamFromCPU("configWord");

		io.write <== dataGen.getOutput("dataOut");
		final int padWidth = MathUtils.nextMultiple(fifoWidth, 128);
		addStreamToCPU("read_fifo") <== Padder.padSource(this, io.read, padWidth);

		iface.logAllocation(this);
	}

	public static void main(final String[] args) {
		final SuperFifoParameters params = new SuperFifoParameters(args);
		final SuperFifoTest m = new SuperFifoTest(params);
		m.build();
	}
}
